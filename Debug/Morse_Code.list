
Morse_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006188  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08006328  08006328  00016328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006528  08006528  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006530  08006530  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006530  08006530  00016530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006534  08006534  00016534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a24  20000010  08006548  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a34  08006548  00024a34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001759f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ff1  00000000  00000000  000375df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003b978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002dc7  00000000  00000000  0003cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c19  00000000  00000000  0003f9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000977fd  00000000  00000000  00054610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebe0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000532c  00000000  00000000  000ebe60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006310 	.word	0x08006310

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006310 	.word	0x08006310

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fccc 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f878 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f90a 	bl	8000708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f4:	f000 f8de 	bl	80006b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f002 fb12 	bl	8002b20 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinSem */
  BinSemHandle = osSemaphoreNew(1, 1, &BinSem_attributes);
 80004fc:	4a24      	ldr	r2, [pc, #144]	; (8000590 <main+0xac>)
 80004fe:	2101      	movs	r1, #1
 8000500:	2001      	movs	r0, #1
 8000502:	f002 fc04 	bl	8002d0e <osSemaphoreNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a22      	ldr	r2, [pc, #136]	; (8000594 <main+0xb0>)
 800050a:	6013      	str	r3, [r2, #0]
  osSemaphoreAcquire(BinSemHandle, osWaitForever);
 800050c:	4b21      	ldr	r3, [pc, #132]	; (8000594 <main+0xb0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f04f 31ff 	mov.w	r1, #4294967295
 8000514:	4618      	mov	r0, r3
 8000516:	f002 fc83 	bl	8002e20 <osSemaphoreAcquire>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queue1 */
  queue1Handle = osMessageQueueNew (16, sizeof(uint16_t), &queue1_attributes);
 800051a:	4a1f      	ldr	r2, [pc, #124]	; (8000598 <main+0xb4>)
 800051c:	2102      	movs	r1, #2
 800051e:	2010      	movs	r0, #16
 8000520:	f002 fd14 	bl	8002f4c <osMessageQueueNew>
 8000524:	4603      	mov	r3, r0
 8000526:	4a1d      	ldr	r2, [pc, #116]	; (800059c <main+0xb8>)
 8000528:	6013      	str	r3, [r2, #0]

  /* creation of queue2_1 */
  queue2_1Handle = osMessageQueueNew (16, sizeof(uint16_t), &queue2_1_attributes);
 800052a:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <main+0xbc>)
 800052c:	2102      	movs	r1, #2
 800052e:	2010      	movs	r0, #16
 8000530:	f002 fd0c 	bl	8002f4c <osMessageQueueNew>
 8000534:	4603      	mov	r3, r0
 8000536:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <main+0xc0>)
 8000538:	6013      	str	r3, [r2, #0]

  /* creation of queue2_2 */
  queue2_2Handle = osMessageQueueNew (16, sizeof(uint16_t), &queue2_2_attributes);
 800053a:	4a1b      	ldr	r2, [pc, #108]	; (80005a8 <main+0xc4>)
 800053c:	2102      	movs	r1, #2
 800053e:	2010      	movs	r0, #16
 8000540:	f002 fd04 	bl	8002f4c <osMessageQueueNew>
 8000544:	4603      	mov	r3, r0
 8000546:	4a19      	ldr	r2, [pc, #100]	; (80005ac <main+0xc8>)
 8000548:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(StartTask1, NULL, &task1_attributes);
 800054a:	4a19      	ldr	r2, [pc, #100]	; (80005b0 <main+0xcc>)
 800054c:	2100      	movs	r1, #0
 800054e:	4819      	ldr	r0, [pc, #100]	; (80005b4 <main+0xd0>)
 8000550:	f002 fb30 	bl	8002bb4 <osThreadNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a18      	ldr	r2, [pc, #96]	; (80005b8 <main+0xd4>)
 8000558:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(StartTask2, NULL, &task2_attributes);
 800055a:	4a18      	ldr	r2, [pc, #96]	; (80005bc <main+0xd8>)
 800055c:	2100      	movs	r1, #0
 800055e:	4818      	ldr	r0, [pc, #96]	; (80005c0 <main+0xdc>)
 8000560:	f002 fb28 	bl	8002bb4 <osThreadNew>
 8000564:	4603      	mov	r3, r0
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <main+0xe0>)
 8000568:	6013      	str	r3, [r2, #0]

  /* creation of task3 */
  task3Handle = osThreadNew(StartTask3, NULL, &task3_attributes);
 800056a:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <main+0xe4>)
 800056c:	2100      	movs	r1, #0
 800056e:	4817      	ldr	r0, [pc, #92]	; (80005cc <main+0xe8>)
 8000570:	f002 fb20 	bl	8002bb4 <osThreadNew>
 8000574:	4603      	mov	r3, r0
 8000576:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <main+0xec>)
 8000578:	6013      	str	r3, [r2, #0]

  /* creation of task4 */
  task4Handle = osThreadNew(StartTask4, NULL, &task4_attributes);
 800057a:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <main+0xf0>)
 800057c:	2100      	movs	r1, #0
 800057e:	4816      	ldr	r0, [pc, #88]	; (80005d8 <main+0xf4>)
 8000580:	f002 fb18 	bl	8002bb4 <osThreadNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <main+0xf8>)
 8000588:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800058a:	f002 faed 	bl	8002b68 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058e:	e7fe      	b.n	800058e <main+0xaa>
 8000590:	08006464 	.word	0x08006464
 8000594:	2000008c 	.word	0x2000008c
 8000598:	0800641c 	.word	0x0800641c
 800059c:	20000080 	.word	0x20000080
 80005a0:	08006434 	.word	0x08006434
 80005a4:	20000084 	.word	0x20000084
 80005a8:	0800644c 	.word	0x0800644c
 80005ac:	20000088 	.word	0x20000088
 80005b0:	0800638c 	.word	0x0800638c
 80005b4:	08000839 	.word	0x08000839
 80005b8:	20000070 	.word	0x20000070
 80005bc:	080063b0 	.word	0x080063b0
 80005c0:	08000965 	.word	0x08000965
 80005c4:	20000074 	.word	0x20000074
 80005c8:	080063d4 	.word	0x080063d4
 80005cc:	08000a0d 	.word	0x08000a0d
 80005d0:	20000078 	.word	0x20000078
 80005d4:	080063f8 	.word	0x080063f8
 80005d8:	08000b19 	.word	0x08000b19
 80005dc:	2000007c 	.word	0x2000007c

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f005 fe86 	bl	8006300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a27      	ldr	r2, [pc, #156]	; (80006ac <SystemClock_Config+0xcc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <SystemClock_Config+0xd0>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000650:	2310      	movs	r3, #16
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000654:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065a:	2304      	movs	r3, #4
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800065e:	2304      	movs	r3, #4
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	4618      	mov	r0, r3
 8000668:	f000 ff0a 	bl	8001480 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000672:	f000 fab5 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f001 f96c 	bl	8001970 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800069e:	f000 fa9f 	bl	8000be0 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_USART2_UART_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ec:	f001 fe12 	bl	8002314 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006f6:	f000 fa73 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000002c 	.word	0x2000002c
 8000704:	40004400 	.word	0x40004400

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <MX_GPIO_Init+0xd4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a2d      	ldr	r2, [pc, #180]	; (80007dc <MX_GPIO_Init+0xd4>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_GPIO_Init+0xd4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b27      	ldr	r3, [pc, #156]	; (80007dc <MX_GPIO_Init+0xd4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a26      	ldr	r2, [pc, #152]	; (80007dc <MX_GPIO_Init+0xd4>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b24      	ldr	r3, [pc, #144]	; (80007dc <MX_GPIO_Init+0xd4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_GPIO_Init+0xd4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a1f      	ldr	r2, [pc, #124]	; (80007dc <MX_GPIO_Init+0xd4>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_GPIO_Init+0xd4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_GPIO_Init+0xd4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a18      	ldr	r2, [pc, #96]	; (80007dc <MX_GPIO_Init+0xd4>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_GPIO_Init+0xd4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_OUT_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <MX_GPIO_Init+0xd8>)
 8000796:	f000 fe59 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800079a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_GPIO_Init+0xdc>)
 80007b0:	f000 fcb0 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_OUT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_OUT_Pin;
 80007b4:	f44f 7308 	mov.w	r3, #544	; 0x220
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_GPIO_Init+0xd8>)
 80007ce:	f000 fca1 	bl	8001114 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020800 	.word	0x40020800

080007e8 <CompareArrays>:

/* USER CODE BEGIN 4 */
char char_buf[ARRLENGTH] = {'\0'};//init char array for comparing against morse array

/* function to compare arrays char_buf and morse char array */
int CompareArrays(char arr1[], char arr2[]) {
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	int check = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < ARRLENGTH; i++) {
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	e012      	b.n	8000822 <CompareArrays+0x3a>
		if (arr1[i] == arr2[i]) {
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	6839      	ldr	r1, [r7, #0]
 8000808:	440b      	add	r3, r1
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	429a      	cmp	r2, r3
 800080e:	d102      	bne.n	8000816 <CompareArrays+0x2e>
			check = 1;
 8000810:	2301      	movs	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e002      	b.n	800081c <CompareArrays+0x34>
		} else {
			check = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
			break;
 800081a:	e005      	b.n	8000828 <CompareArrays+0x40>
	for (int i = 0; i < ARRLENGTH; i++) {
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	3301      	adds	r3, #1
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	2b04      	cmp	r3, #4
 8000826:	dde9      	ble.n	80007fc <CompareArrays+0x14>
		}
	}
	return check;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	; 0x30
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	/* newline on every start up */
	uint8_t* reset = "\n\r";
 8000840:	4b44      	ldr	r3, [pc, #272]	; (8000954 <StartTask1+0x11c>)
 8000842:	61bb      	str	r3, [r7, #24]
	HAL_UART_Transmit(&huart2, reset, sizeof(reset), 100);
 8000844:	2364      	movs	r3, #100	; 0x64
 8000846:	2204      	movs	r2, #4
 8000848:	69b9      	ldr	r1, [r7, #24]
 800084a:	4843      	ldr	r0, [pc, #268]	; (8000958 <StartTask1+0x120>)
 800084c:	f001 fdaf 	bl	80023ae <HAL_UART_Transmit>

	int press = 0; //time at press
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
	int release = 0; //time at release
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
	int done = 0; //flag for if finish state has been sent
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
	int space = 0; //flag for if a space has already been sent
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
	uint8_t buttonPress = 0; //flag for if button is currently being pressed
 8000860:	2300      	movs	r3, #0
 8000862:	77fb      	strb	r3, [r7, #31]
	Code state;	//init state to pass on

  /* Infinite loop */
  for(;;)
  {
	  	 if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0) {
 8000864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000868:	483c      	ldr	r0, [pc, #240]	; (800095c <StartTask1+0x124>)
 800086a:	f000 fdd7 	bl	800141c <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d10d      	bne.n	8000890 <StartTask1+0x58>
	  		 if (buttonPress == 0) {
 8000874:	7ffb      	ldrb	r3, [r7, #31]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d168      	bne.n	800094c <StartTask1+0x114>
				 /* start 'timer' on button press */
				 press = HAL_GetTick();
 800087a:	f000 fb39 	bl	8000ef0 <HAL_GetTick>
 800087e:	4603      	mov	r3, r0
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
				 buttonPress = 1;
 8000882:	2301      	movs	r3, #1
 8000884:	77fb      	strb	r3, [r7, #31]
				 done = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
				 space = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
 800088e:	e05d      	b.n	800094c <StartTask1+0x114>
	  		 }
	  	 } else if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 1) {
 8000890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000894:	4831      	ldr	r0, [pc, #196]	; (800095c <StartTask1+0x124>)
 8000896:	f000 fdc1 	bl	800141c <HAL_GPIO_ReadPin>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d155      	bne.n	800094c <StartTask1+0x114>
	  		 if (buttonPress == 1) {
 80008a0:	7ffb      	ldrb	r3, [r7, #31]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d11b      	bne.n	80008de <StartTask1+0xa6>
	  			/* if button released, send to queue when signal done */
				 release = HAL_GetTick();
 80008a6:	f000 fb23 	bl	8000ef0 <HAL_GetTick>
 80008aa:	4603      	mov	r3, r0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28

				 int pressTime = release - press;
 80008ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	613b      	str	r3, [r7, #16]

				 if (pressTime < SIG_DOT) {
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008bc:	da02      	bge.n	80008c4 <StartTask1+0x8c>
					 state = DOT;
 80008be:	2300      	movs	r3, #0
 80008c0:	73fb      	strb	r3, [r7, #15]
 80008c2:	e001      	b.n	80008c8 <StartTask1+0x90>
				 }	else {
					 state = DASH;
 80008c4:	2301      	movs	r3, #1
 80008c6:	73fb      	strb	r3, [r7, #15]
				 }
				osMessageQueuePut(queue1Handle, &state, 0, 0);
 80008c8:	4b25      	ldr	r3, [pc, #148]	; (8000960 <StartTask1+0x128>)
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	f107 010f 	add.w	r1, r7, #15
 80008d0:	2300      	movs	r3, #0
 80008d2:	2200      	movs	r2, #0
 80008d4:	f002 fbae 	bl	8003034 <osMessageQueuePut>
				buttonPress = 0; //reset button press
 80008d8:	2300      	movs	r3, #0
 80008da:	77fb      	strb	r3, [r7, #31]
 80008dc:	e036      	b.n	800094c <StartTask1+0x114>
	  		 } else {

	  			/* if button has not been pressed yet don't start counting pause */
				 if(press == 0) { //first press control
 80008de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d103      	bne.n	80008ec <StartTask1+0xb4>
					 osDelay(50);
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f002 f9f7 	bl	8002cd8 <osDelay>
					 continue;
 80008ea:	e032      	b.n	8000952 <StartTask1+0x11a>
				 }

				 /* determine how long the pause is */
				 int timeNow = HAL_GetTick();
 80008ec:	f000 fb00 	bl	8000ef0 <HAL_GetTick>
 80008f0:	4603      	mov	r3, r0
 80008f2:	617b      	str	r3, [r7, #20]

				 /* if finish signal hasn't been sent yet */
				 if (done == 0) {
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d112      	bne.n	8000920 <StartTask1+0xe8>
					 /* checking if enough time has passed to sent finish state */
					 if  (release + LETTER_SPACE <= timeNow) {
 80008fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fc:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	429a      	cmp	r2, r3
 8000904:	dd22      	ble.n	800094c <StartTask1+0x114>
							state = FINISH;
 8000906:	2303      	movs	r3, #3
 8000908:	73fb      	strb	r3, [r7, #15]
							done = 1; //make sure finish isn't sent constantly
 800090a:	2301      	movs	r3, #1
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
							osMessageQueuePut(queue1Handle, &state, 0, 0);
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <StartTask1+0x128>)
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	f107 010f 	add.w	r1, r7, #15
 8000916:	2300      	movs	r3, #0
 8000918:	2200      	movs	r2, #0
 800091a:	f002 fb8b 	bl	8003034 <osMessageQueuePut>
 800091e:	e015      	b.n	800094c <StartTask1+0x114>
					 }
				 } else { //if finish signal has been sent
					 /* if space character hasnt been sent */
					 if (space == 0) {
 8000920:	6a3b      	ldr	r3, [r7, #32]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d112      	bne.n	800094c <StartTask1+0x114>
						 /* checking if enough time has passed to sent space state */
						 if (release + SPACE_CHAR <= timeNow){
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000928:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 800092c:	3317      	adds	r3, #23
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	429a      	cmp	r2, r3
 8000932:	dd0b      	ble.n	800094c <StartTask1+0x114>
						 	state = SPACE;
 8000934:	2302      	movs	r3, #2
 8000936:	73fb      	strb	r3, [r7, #15]
						 	space = 1; //make sure space isn't sent constantly
 8000938:	2301      	movs	r3, #1
 800093a:	623b      	str	r3, [r7, #32]
						 	osMessageQueuePut(queue1Handle, &state, 0, 0);
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <StartTask1+0x128>)
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	f107 010f 	add.w	r1, r7, #15
 8000944:	2300      	movs	r3, #0
 8000946:	2200      	movs	r2, #0
 8000948:	f002 fb74 	bl	8003034 <osMessageQueuePut>
					 }
				 }
	  		 }

	  	 }
	  	 osDelay(100);
 800094c:	2064      	movs	r0, #100	; 0x64
 800094e:	f002 f9c3 	bl	8002cd8 <osDelay>
	  	 if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0) {
 8000952:	e787      	b.n	8000864 <StartTask1+0x2c>
 8000954:	08006370 	.word	0x08006370
 8000958:	2000002c 	.word	0x2000002c
 800095c:	40020800 	.word	0x40020800
 8000960:	20000080 	.word	0x20000080

08000964 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	Code state;
	osStatus_t status; //has message been received from queue
  /* Infinite loop */
  for(;;)
  {
	  status = osMessageQueueGet(queue1Handle, &state, NULL, 0);
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <StartTask2+0x98>)
 800096e:	6818      	ldr	r0, [r3, #0]
 8000970:	f107 010b 	add.w	r1, r7, #11
 8000974:	2300      	movs	r3, #0
 8000976:	2200      	movs	r2, #0
 8000978:	f002 fbbc 	bl	80030f4 <osMessageQueueGet>
 800097c:	60f8      	str	r0, [r7, #12]
	  /* if message has been received from queue */
	  if (status == osOK) {
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f3      	bne.n	800096c <StartTask2+0x8>
		  /* LED blink */
		  if (state == DOT) {
 8000984:	7afb      	ldrb	r3, [r7, #11]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d112      	bne.n	80009b0 <StartTask2+0x4c>
			  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	2120      	movs	r1, #32
 800098e:	481c      	ldr	r0, [pc, #112]	; (8000a00 <StartTask2+0x9c>)
 8000990:	f000 fd5c 	bl	800144c <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 8000994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000998:	f000 fab6 	bl	8000f08 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2120      	movs	r1, #32
 80009a0:	4817      	ldr	r0, [pc, #92]	; (8000a00 <StartTask2+0x9c>)
 80009a2:	f000 fd53 	bl	800144c <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 80009a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009aa:	f000 faad 	bl	8000f08 <HAL_Delay>
 80009ae:	e014      	b.n	80009da <StartTask2+0x76>
		  } else if (state == DASH) {
 80009b0:	7afb      	ldrb	r3, [r7, #11]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d111      	bne.n	80009da <StartTask2+0x76>
			  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2120      	movs	r1, #32
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <StartTask2+0x9c>)
 80009bc:	f000 fd46 	bl	800144c <HAL_GPIO_WritePin>
			  HAL_Delay(3000);
 80009c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009c4:	f000 faa0 	bl	8000f08 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2120      	movs	r1, #32
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <StartTask2+0x9c>)
 80009ce:	f000 fd3d 	bl	800144c <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 80009d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d6:	f000 fa97 	bl	8000f08 <HAL_Delay>
		  }
		  /* give to queue 2.1 and 2.2 */
		  osMessageQueuePut(queue2_1Handle, &state, 0, 0);
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <StartTask2+0xa0>)
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	f107 010b 	add.w	r1, r7, #11
 80009e2:	2300      	movs	r3, #0
 80009e4:	2200      	movs	r2, #0
 80009e6:	f002 fb25 	bl	8003034 <osMessageQueuePut>
		  osMessageQueuePut(queue2_2Handle, &state, 0, 0);
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <StartTask2+0xa4>)
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	f107 010b 	add.w	r1, r7, #11
 80009f2:	2300      	movs	r3, #0
 80009f4:	2200      	movs	r2, #0
 80009f6:	f002 fb1d 	bl	8003034 <osMessageQueuePut>
	  status = osMessageQueueGet(queue1Handle, &state, NULL, 0);
 80009fa:	e7b7      	b.n	800096c <StartTask2+0x8>
 80009fc:	20000080 	.word	0x20000080
 8000a00:	40020000 	.word	0x40020000
 8000a04:	20000084 	.word	0x20000084
 8000a08:	20000088 	.word	0x20000088

08000a0c <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
	char transmit[1] = {'\0'};
 8000a14:	2300      	movs	r3, #0
 8000a16:	743b      	strb	r3, [r7, #16]
	int index = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
	Code state;
	osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
	  status = osMessageQueueGet(queue2_1Handle, &state, NULL, 0);
 8000a1c:	4b39      	ldr	r3, [pc, #228]	; (8000b04 <StartTask3+0xf8>)
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	f107 010f 	add.w	r1, r7, #15
 8000a24:	2300      	movs	r3, #0
 8000a26:	2200      	movs	r2, #0
 8000a28:	f002 fb64 	bl	80030f4 <osMessageQueueGet>
 8000a2c:	6178      	str	r0, [r7, #20]
	  /* if message has been received from queue */
	  if (status == osOK) {
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1f3      	bne.n	8000a1c <StartTask3+0x10>
		  /* if too many button presses have happened try to print */
		  if (index >= ARRLENGTH) {
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	dd06      	ble.n	8000a48 <StartTask3+0x3c>
			  char_buf[index] = '\0';
 8000a3a:	4a33      	ldr	r2, [pc, #204]	; (8000b08 <StartTask3+0xfc>)
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	4413      	add	r3, r2
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
			  state = FINISH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	73fb      	strb	r3, [r7, #15]
		  }
		  if (state == DOT) {
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d108      	bne.n	8000a60 <StartTask3+0x54>
			  char_buf[index] = '.'; //put dot in char array
 8000a4e:	4a2e      	ldr	r2, [pc, #184]	; (8000b08 <StartTask3+0xfc>)
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	4413      	add	r3, r2
 8000a54:	222e      	movs	r2, #46	; 0x2e
 8000a56:	701a      	strb	r2, [r3, #0]
			  index++;
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	61fb      	str	r3, [r7, #28]
 8000a5e:	e7dd      	b.n	8000a1c <StartTask3+0x10>
		  } else if (state == DASH) { //put dash in char array
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d108      	bne.n	8000a78 <StartTask3+0x6c>
			  char_buf[index] = '-';
 8000a66:	4a28      	ldr	r2, [pc, #160]	; (8000b08 <StartTask3+0xfc>)
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	222d      	movs	r2, #45	; 0x2d
 8000a6e:	701a      	strb	r2, [r3, #0]
			  index++;
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	3301      	adds	r3, #1
 8000a74:	61fb      	str	r3, [r7, #28]
 8000a76:	e7d1      	b.n	8000a1c <StartTask3+0x10>
		  } else if (state == SPACE) { //print space onto console
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d109      	bne.n	8000a92 <StartTask3+0x86>
			  transmit[0] = ' ';
 8000a7e:	2320      	movs	r3, #32
 8000a80:	743b      	strb	r3, [r7, #16]
			  HAL_UART_Transmit(&huart2, transmit, sizeof(transmit), 100);
 8000a82:	f107 0110 	add.w	r1, r7, #16
 8000a86:	2364      	movs	r3, #100	; 0x64
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4820      	ldr	r0, [pc, #128]	; (8000b0c <StartTask3+0x100>)
 8000a8c:	f001 fc8f 	bl	80023ae <HAL_UART_Transmit>
 8000a90:	e7c4      	b.n	8000a1c <StartTask3+0x10>
		  } else if (state == FINISH) {
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d1c1      	bne.n	8000a1c <StartTask3+0x10>
			  /* find matching morse character */
			  for (int i = 0; morseTable[i].morse != NULL; i++) {
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
				if (CompareArrays(char_buf, morseTable[i].morse) == 1) {
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4a1a      	ldr	r2, [pc, #104]	; (8000b10 <StartTask3+0x104>)
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4816      	ldr	r0, [pc, #88]	; (8000b08 <StartTask3+0xfc>)
 8000aae:	f7ff fe9b 	bl	80007e8 <CompareArrays>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d120      	bne.n	8000afa <StartTask3+0xee>
				    transmit[0] = morseTable[i].character;	//put character on console
 8000ab8:	4915      	ldr	r1, [pc, #84]	; (8000b10 <StartTask3+0x104>)
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4613      	mov	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	440b      	add	r3, r1
 8000ac6:	3305      	adds	r3, #5
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	743b      	strb	r3, [r7, #16]
					HAL_UART_Transmit(&huart2, transmit, sizeof(transmit), 100);
 8000acc:	f107 0110 	add.w	r1, r7, #16
 8000ad0:	2364      	movs	r3, #100	; 0x64
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <StartTask3+0x100>)
 8000ad6:	f001 fc6a 	bl	80023ae <HAL_UART_Transmit>
					memset(char_buf, '\0', ARRLENGTH*sizeof(char));	//reset for next letter
 8000ada:	2205      	movs	r2, #5
 8000adc:	2100      	movs	r1, #0
 8000ade:	480a      	ldr	r0, [pc, #40]	; (8000b08 <StartTask3+0xfc>)
 8000ae0:	f005 fc0e 	bl	8006300 <memset>
					index = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
					state = EMPTY;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	73fb      	strb	r3, [r7, #15]
					break;
 8000aec:	bf00      	nop
				}
			  }
			  osSemaphoreRelease(BinSemHandle); //release for task 4
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <StartTask3+0x108>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 f9e6 	bl	8002ec4 <osSemaphoreRelease>
 8000af8:	e790      	b.n	8000a1c <StartTask3+0x10>
			  for (int i = 0; morseTable[i].morse != NULL; i++) {
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	3301      	adds	r3, #1
 8000afe:	61bb      	str	r3, [r7, #24]
				if (CompareArrays(char_buf, morseTable[i].morse) == 1) {
 8000b00:	e7cc      	b.n	8000a9c <StartTask3+0x90>
 8000b02:	bf00      	nop
 8000b04:	20000084 	.word	0x20000084
 8000b08:	20000090 	.word	0x20000090
 8000b0c:	2000002c 	.word	0x2000002c
 8000b10:	08006474 	.word	0x08006474
 8000b14:	2000008c 	.word	0x2000008c

08000b18 <StartTask4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask4 */
void StartTask4(void *argument)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	Code state;
	osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(BinSemHandle, osWaitForever);
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <StartTask4+0x98>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 f979 	bl	8002e20 <osSemaphoreAcquire>
	  status = osMessageQueueGet(queue2_2Handle, &state, NULL, 0);
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <StartTask4+0x9c>)
 8000b30:	6818      	ldr	r0, [r3, #0]
 8000b32:	f107 010b 	add.w	r1, r7, #11
 8000b36:	2300      	movs	r3, #0
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f002 fadb 	bl	80030f4 <osMessageQueueGet>
 8000b3e:	60f8      	str	r0, [r7, #12]
	  /* if message has been received from queue */
	  if (status == osOK) {
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d1ec      	bne.n	8000b20 <StartTask4+0x8>
		  /* run through queue and play character */
		  if (state == DOT) {
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d112      	bne.n	8000b72 <StartTask4+0x5a>
			HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2120      	movs	r1, #32
 8000b50:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <StartTask4+0xa0>)
 8000b52:	f000 fc7b 	bl	800144c <HAL_GPIO_WritePin>
			HAL_Delay(SIG_DOT);
 8000b56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b5a:	f000 f9d5 	bl	8000f08 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2120      	movs	r1, #32
 8000b62:	4815      	ldr	r0, [pc, #84]	; (8000bb8 <StartTask4+0xa0>)
 8000b64:	f000 fc72 	bl	800144c <HAL_GPIO_WritePin>
			HAL_Delay(SAME_LETTER);
 8000b68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6c:	f000 f9cc 	bl	8000f08 <HAL_Delay>
 8000b70:	e014      	b.n	8000b9c <StartTask4+0x84>
		  } else if (state == DASH) {
 8000b72:	7afb      	ldrb	r3, [r7, #11]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d111      	bne.n	8000b9c <StartTask4+0x84>
			HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	480e      	ldr	r0, [pc, #56]	; (8000bb8 <StartTask4+0xa0>)
 8000b7e:	f000 fc65 	bl	800144c <HAL_GPIO_WritePin>
			HAL_Delay(SIG_DASH);
 8000b82:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b86:	f000 f9bf 	bl	8000f08 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <StartTask4+0xa0>)
 8000b90:	f000 fc5c 	bl	800144c <HAL_GPIO_WritePin>
			HAL_Delay(SAME_LETTER);
 8000b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b98:	f000 f9b6 	bl	8000f08 <HAL_Delay>
		  }
		  /* if user isnt finished, dont stop */
		  if (state != FINISH) {
 8000b9c:	7afb      	ldrb	r3, [r7, #11]
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	d0be      	beq.n	8000b20 <StartTask4+0x8>
			  osSemaphoreRelease(BinSemHandle);
 8000ba2:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <StartTask4+0x98>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 f98c 	bl	8002ec4 <osSemaphoreRelease>
	  osSemaphoreAcquire(BinSemHandle, osWaitForever);
 8000bac:	e7b8      	b.n	8000b20 <StartTask4+0x8>
 8000bae:	bf00      	nop
 8000bb0:	2000008c 	.word	0x2000008c
 8000bb4:	20000088 	.word	0x20000088
 8000bb8:	40020000 	.word	0x40020000

08000bbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bce:	f000 f97b 	bl	8000ec8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40000c00 	.word	0x40000c00

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_MspInit+0x54>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <HAL_MspInit+0x54>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x54>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_MspInit+0x54>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_MspInit+0x54>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_MspInit+0x54>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	210f      	movs	r1, #15
 8000c2e:	f06f 0001 	mvn.w	r0, #1
 8000c32:	f000 fa45 	bl	80010c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_UART_MspInit+0x84>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d12b      	bne.n	8000cbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <HAL_UART_MspInit+0x8c>)
 8000cba:	f000 fa2b 	bl	8001114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	; 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08e      	sub	sp, #56	; 0x38
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <HAL_InitTick+0xe4>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a32      	ldr	r2, [pc, #200]	; (8000db8 <HAL_InitTick+0xe4>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <HAL_InitTick+0xe4>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 0308 	and.w	r3, r3, #8
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 f850 	bl	8001db0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d10:	6a3b      	ldr	r3, [r7, #32]
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d103      	bne.n	8000d22 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d1a:	f001 f821 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8000d1e:	6378      	str	r0, [r7, #52]	; 0x34
 8000d20:	e004      	b.n	8000d2c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d22:	f001 f81d 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8000d26:	4603      	mov	r3, r0
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d2e:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <HAL_InitTick+0xe8>)
 8000d30:	fba2 2303 	umull	r2, r3, r2, r3
 8000d34:	0c9b      	lsrs	r3, r3, #18
 8000d36:	3b01      	subs	r3, #1
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d3c:	4a21      	ldr	r2, [pc, #132]	; (8000dc4 <HAL_InitTick+0xf0>)
 8000d3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d46:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000d48:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000d60:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d62:	f001 f857 	bl	8001e14 <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d11b      	bne.n	8000dac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <HAL_InitTick+0xec>)
 8000d76:	f001 f8a7 	bl	8001ec8 <HAL_TIM_Base_Start_IT>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d111      	bne.n	8000dac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d88:	2032      	movs	r0, #50	; 0x32
 8000d8a:	f000 f9b5 	bl	80010f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d808      	bhi.n	8000da6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	2032      	movs	r0, #50	; 0x32
 8000d9a:	f000 f991 	bl	80010c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_InitTick+0xf4>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e002      	b.n	8000dac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3738      	adds	r7, #56	; 0x38
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	431bde83 	.word	0x431bde83
 8000dc0:	20000098 	.word	0x20000098
 8000dc4:	40000c00 	.word	0x40000c00
 8000dc8:	20000004 	.word	0x20000004

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <TIM5_IRQHandler+0x10>)
 8000dfe:	f001 f8c5 	bl	8001f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000098 	.word	0x20000098

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e36:	490e      	ldr	r1, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e4c:	4c0b      	ldr	r4, [pc, #44]	; (8000e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e5a:	f7ff ffd7 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f005 fa1d 	bl	800629c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fb3f 	bl	80004e4 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e74:	08006538 	.word	0x08006538
  ldr r2, =_sbss
 8000e78:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e7c:	20004a34 	.word	0x20004a34

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f8fc 	bl	80010aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f7ff ff0e 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fe98 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	200000e0 	.word	0x200000e0

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200000e0 	.word	0x200000e0

08000f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d005      	beq.n	8000f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_Delay+0x44>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2e:	bf00      	nop
 8000f30:	f7ff ffde 	bl	8000ef0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f7      	bhi.n	8000f30 <HAL_Delay+0x28>
  {
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <__NVIC_EnableIRQ+0x38>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff4c 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d2:	f7ff ff61 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 80010d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	6978      	ldr	r0, [r7, #20]
 80010de:	f7ff ffb1 	bl	8001044 <NVIC_EncodePriority>
 80010e2:	4602      	mov	r2, r0
 80010e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff80 	bl	8000ff0 <__NVIC_SetPriority>
}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff54 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	e159      	b.n	80013e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001130:	2201      	movs	r2, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	429a      	cmp	r2, r3
 800114a:	f040 8148 	bne.w	80013de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d005      	beq.n	8001166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001162:	2b02      	cmp	r3, #2
 8001164:	d130      	bne.n	80011c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f003 0201 	and.w	r2, r3, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d017      	beq.n	8001204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d123      	bne.n	8001258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	08da      	lsrs	r2, r3, #3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3208      	adds	r2, #8
 8001218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	08da      	lsrs	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3208      	adds	r2, #8
 8001252:	69b9      	ldr	r1, [r7, #24]
 8001254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0203 	and.w	r2, r3, #3
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 80a2 	beq.w	80013de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b57      	ldr	r3, [pc, #348]	; (80013fc <HAL_GPIO_Init+0x2e8>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a56      	ldr	r2, [pc, #344]	; (80013fc <HAL_GPIO_Init+0x2e8>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b54      	ldr	r3, [pc, #336]	; (80013fc <HAL_GPIO_Init+0x2e8>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b6:	4a52      	ldr	r2, [pc, #328]	; (8001400 <HAL_GPIO_Init+0x2ec>)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a49      	ldr	r2, [pc, #292]	; (8001404 <HAL_GPIO_Init+0x2f0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d019      	beq.n	8001316 <HAL_GPIO_Init+0x202>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a48      	ldr	r2, [pc, #288]	; (8001408 <HAL_GPIO_Init+0x2f4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0x1fe>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a47      	ldr	r2, [pc, #284]	; (800140c <HAL_GPIO_Init+0x2f8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00d      	beq.n	800130e <HAL_GPIO_Init+0x1fa>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a46      	ldr	r2, [pc, #280]	; (8001410 <HAL_GPIO_Init+0x2fc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0x1f6>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a45      	ldr	r2, [pc, #276]	; (8001414 <HAL_GPIO_Init+0x300>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_GPIO_Init+0x1f2>
 8001302:	2304      	movs	r3, #4
 8001304:	e008      	b.n	8001318 <HAL_GPIO_Init+0x204>
 8001306:	2307      	movs	r3, #7
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x204>
 800130a:	2303      	movs	r3, #3
 800130c:	e004      	b.n	8001318 <HAL_GPIO_Init+0x204>
 800130e:	2302      	movs	r3, #2
 8001310:	e002      	b.n	8001318 <HAL_GPIO_Init+0x204>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x204>
 8001316:	2300      	movs	r3, #0
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	f002 0203 	and.w	r2, r2, #3
 800131e:	0092      	lsls	r2, r2, #2
 8001320:	4093      	lsls	r3, r2
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001328:	4935      	ldr	r1, [pc, #212]	; (8001400 <HAL_GPIO_Init+0x2ec>)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3302      	adds	r3, #2
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001336:	4b38      	ldr	r3, [pc, #224]	; (8001418 <HAL_GPIO_Init+0x304>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800135a:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <HAL_GPIO_Init+0x304>)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_GPIO_Init+0x304>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001384:	4a24      	ldr	r2, [pc, #144]	; (8001418 <HAL_GPIO_Init+0x304>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HAL_GPIO_Init+0x304>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ae:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <HAL_GPIO_Init+0x304>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_GPIO_Init+0x304>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d8:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_GPIO_Init+0x304>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3301      	adds	r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	2b0f      	cmp	r3, #15
 80013e8:	f67f aea2 	bls.w	8001130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40013800 	.word	0x40013800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40021000 	.word	0x40021000
 8001418:	40013c00 	.word	0x40013c00

0800141c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e001      	b.n	800143e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001468:	e003      	b.n	8001472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	041a      	lsls	r2, r3, #16
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	619a      	str	r2, [r3, #24]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e267      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d075      	beq.n	800158a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800149e:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d00c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014aa:	4b85      	ldr	r3, [pc, #532]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d112      	bne.n	80014dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b6:	4b82      	ldr	r3, [pc, #520]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014c2:	d10b      	bne.n	80014dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	4b7e      	ldr	r3, [pc, #504]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d05b      	beq.n	8001588 <HAL_RCC_OscConfig+0x108>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d157      	bne.n	8001588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e242      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e4:	d106      	bne.n	80014f4 <HAL_RCC_OscConfig+0x74>
 80014e6:	4b76      	ldr	r3, [pc, #472]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a75      	ldr	r2, [pc, #468]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e01d      	b.n	8001530 <HAL_RCC_OscConfig+0xb0>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x98>
 80014fe:	4b70      	ldr	r3, [pc, #448]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6f      	ldr	r2, [pc, #444]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b6d      	ldr	r3, [pc, #436]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a6c      	ldr	r2, [pc, #432]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e00b      	b.n	8001530 <HAL_RCC_OscConfig+0xb0>
 8001518:	4b69      	ldr	r3, [pc, #420]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a68      	ldr	r2, [pc, #416]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800151e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b66      	ldr	r3, [pc, #408]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a65      	ldr	r2, [pc, #404]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800152a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fcda 	bl	8000ef0 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff fcd6 	bl	8000ef0 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	; 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e207      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	4b5b      	ldr	r3, [pc, #364]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0xc0>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fcc6 	bl	8000ef0 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fcc2 	bl	8000ef0 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	; 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1f3      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	4b51      	ldr	r3, [pc, #324]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0xe8>
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d063      	beq.n	800165e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001596:	4b4a      	ldr	r3, [pc, #296]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00b      	beq.n	80015ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a2:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d11c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ae:	4b44      	ldr	r3, [pc, #272]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d116      	bne.n	80015e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <HAL_RCC_OscConfig+0x152>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e1c7      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4937      	ldr	r1, [pc, #220]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e6:	e03a      	b.n	800165e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d020      	beq.n	8001632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f0:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <HAL_RCC_OscConfig+0x244>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff fc7b 	bl	8000ef0 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff fc77 	bl	8000ef0 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e1a8      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4925      	ldr	r1, [pc, #148]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800162c:	4313      	orrs	r3, r2
 800162e:	600b      	str	r3, [r1, #0]
 8001630:	e015      	b.n	800165e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001632:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_RCC_OscConfig+0x244>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff fc5a 	bl	8000ef0 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001640:	f7ff fc56 	bl	8000ef0 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e187      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d036      	beq.n	80016d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d016      	beq.n	80016a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_RCC_OscConfig+0x248>)
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fc3a 	bl	8000ef0 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff fc36 	bl	8000ef0 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e167      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x200>
 800169e:	e01b      	b.n	80016d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_RCC_OscConfig+0x248>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a6:	f7ff fc23 	bl	8000ef0 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	e00e      	b.n	80016cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ae:	f7ff fc1f 	bl	8000ef0 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d907      	bls.n	80016cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e150      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
 80016c0:	40023800 	.word	0x40023800
 80016c4:	42470000 	.word	0x42470000
 80016c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016cc:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1ea      	bne.n	80016ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 8097 	beq.w	8001814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ea:	4b81      	ldr	r3, [pc, #516]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10f      	bne.n	8001716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b7d      	ldr	r3, [pc, #500]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a7c      	ldr	r2, [pc, #496]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b7a      	ldr	r3, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001712:	2301      	movs	r3, #1
 8001714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001716:	4b77      	ldr	r3, [pc, #476]	; (80018f4 <HAL_RCC_OscConfig+0x474>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d118      	bne.n	8001754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001722:	4b74      	ldr	r3, [pc, #464]	; (80018f4 <HAL_RCC_OscConfig+0x474>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a73      	ldr	r2, [pc, #460]	; (80018f4 <HAL_RCC_OscConfig+0x474>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172e:	f7ff fbdf 	bl	8000ef0 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001736:	f7ff fbdb 	bl	8000ef0 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e10c      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001748:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <HAL_RCC_OscConfig+0x474>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x2ea>
 800175c:	4b64      	ldr	r3, [pc, #400]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001760:	4a63      	ldr	r2, [pc, #396]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6713      	str	r3, [r2, #112]	; 0x70
 8001768:	e01c      	b.n	80017a4 <HAL_RCC_OscConfig+0x324>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x30c>
 8001772:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	4a5e      	ldr	r2, [pc, #376]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6713      	str	r3, [r2, #112]	; 0x70
 800177e:	4b5c      	ldr	r3, [pc, #368]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	4a5b      	ldr	r2, [pc, #364]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6713      	str	r3, [r2, #112]	; 0x70
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0x324>
 800178c:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a57      	ldr	r2, [pc, #348]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
 8001798:	4b55      	ldr	r3, [pc, #340]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	4a54      	ldr	r2, [pc, #336]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 800179e:	f023 0304 	bic.w	r3, r3, #4
 80017a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d015      	beq.n	80017d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff fba0 	bl	8000ef0 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff fb9c 	bl	8000ef0 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e0cb      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0ee      	beq.n	80017b4 <HAL_RCC_OscConfig+0x334>
 80017d6:	e014      	b.n	8001802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fb8a 	bl	8000ef0 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e0:	f7ff fb86 	bl	8000ef0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e0b5      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f6:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1ee      	bne.n	80017e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d105      	bne.n	8001814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001808:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	4a38      	ldr	r2, [pc, #224]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 800180e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001812:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80a1 	beq.w	8001960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b08      	cmp	r3, #8
 8001828:	d05c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d141      	bne.n	80018b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <HAL_RCC_OscConfig+0x478>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fb5a 	bl	8000ef0 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff fb56 	bl	8000ef0 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e087      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001852:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69da      	ldr	r2, [r3, #28]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	019b      	lsls	r3, r3, #6
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	085b      	lsrs	r3, r3, #1
 8001876:	3b01      	subs	r3, #1
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	061b      	lsls	r3, r3, #24
 8001882:	491b      	ldr	r1, [pc, #108]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x478>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff fb2f 	bl	8000ef0 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001896:	f7ff fb2b 	bl	8000ef0 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e05c      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x416>
 80018b4:	e054      	b.n	8001960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_RCC_OscConfig+0x478>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff fb18 	bl	8000ef0 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff fb14 	bl	8000ef0 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e045      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x444>
 80018e2:	e03d      	b.n	8001960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e038      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40007000 	.word	0x40007000
 80018f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_RCC_OscConfig+0x4ec>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d028      	beq.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d121      	bne.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d11a      	bne.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001934:	4293      	cmp	r3, r2
 8001936:	d111      	bne.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d107      	bne.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0cc      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001984:	4b68      	ldr	r3, [pc, #416]	; (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d90c      	bls.n	80019ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b65      	ldr	r3, [pc, #404]	; (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0b8      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d020      	beq.n	80019fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a52      	ldr	r2, [pc, #328]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e8:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	494d      	ldr	r1, [pc, #308]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d044      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d119      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e07f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e067      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4e:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 0203 	bic.w	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4934      	ldr	r1, [pc, #208]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a60:	f7ff fa46 	bl	8000ef0 <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7ff fa42 	bl	8000ef0 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e04f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 020c 	and.w	r2, r3, #12
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1eb      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a90:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d20c      	bcs.n	8001ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e032      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4916      	ldr	r1, [pc, #88]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	490e      	ldr	r1, [pc, #56]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001af6:	f000 f821 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8001afa:	4602      	mov	r2, r0
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	490a      	ldr	r1, [pc, #40]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	5ccb      	ldrb	r3, [r1, r3]
 8001b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0e:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff f8dc 	bl	8000cd4 <HAL_InitTick>

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023c00 	.word	0x40023c00
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	08006510 	.word	0x08006510
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b40:	b094      	sub	sp, #80	; 0x50
 8001b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	647b      	str	r3, [r7, #68]	; 0x44
 8001b48:	2300      	movs	r3, #0
 8001b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b54:	4b79      	ldr	r3, [pc, #484]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d00d      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x40>
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	f200 80e1 	bhi.w	8001d28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x34>
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d003      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b6e:	e0db      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b73      	ldr	r3, [pc, #460]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b74:	e0db      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b76:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b7a:	e0d8      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b7c:	4b6f      	ldr	r3, [pc, #444]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b86:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d063      	beq.n	8001c5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b92:	4b6a      	ldr	r3, [pc, #424]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	099b      	lsrs	r3, r3, #6
 8001b98:	2200      	movs	r2, #0
 8001b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8001baa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bae:	4622      	mov	r2, r4
 8001bb0:	462b      	mov	r3, r5
 8001bb2:	f04f 0000 	mov.w	r0, #0
 8001bb6:	f04f 0100 	mov.w	r1, #0
 8001bba:	0159      	lsls	r1, r3, #5
 8001bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc0:	0150      	lsls	r0, r2, #5
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	1a51      	subs	r1, r2, r1
 8001bca:	6139      	str	r1, [r7, #16]
 8001bcc:	4629      	mov	r1, r5
 8001bce:	eb63 0301 	sbc.w	r3, r3, r1
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001be0:	4659      	mov	r1, fp
 8001be2:	018b      	lsls	r3, r1, #6
 8001be4:	4651      	mov	r1, sl
 8001be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bea:	4651      	mov	r1, sl
 8001bec:	018a      	lsls	r2, r1, #6
 8001bee:	4651      	mov	r1, sl
 8001bf0:	ebb2 0801 	subs.w	r8, r2, r1
 8001bf4:	4659      	mov	r1, fp
 8001bf6:	eb63 0901 	sbc.w	r9, r3, r1
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c0e:	4690      	mov	r8, r2
 8001c10:	4699      	mov	r9, r3
 8001c12:	4623      	mov	r3, r4
 8001c14:	eb18 0303 	adds.w	r3, r8, r3
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	462b      	mov	r3, r5
 8001c1c:	eb49 0303 	adc.w	r3, r9, r3
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c2e:	4629      	mov	r1, r5
 8001c30:	024b      	lsls	r3, r1, #9
 8001c32:	4621      	mov	r1, r4
 8001c34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c38:	4621      	mov	r1, r4
 8001c3a:	024a      	lsls	r2, r1, #9
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c42:	2200      	movs	r2, #0
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c4c:	f7fe fac8 	bl	80001e0 <__aeabi_uldivmod>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4613      	mov	r3, r2
 8001c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c58:	e058      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	099b      	lsrs	r3, r3, #6
 8001c60:	2200      	movs	r2, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	4611      	mov	r1, r2
 8001c66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c6a:	623b      	str	r3, [r7, #32]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c74:	4642      	mov	r2, r8
 8001c76:	464b      	mov	r3, r9
 8001c78:	f04f 0000 	mov.w	r0, #0
 8001c7c:	f04f 0100 	mov.w	r1, #0
 8001c80:	0159      	lsls	r1, r3, #5
 8001c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c86:	0150      	lsls	r0, r2, #5
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4641      	mov	r1, r8
 8001c8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c92:	4649      	mov	r1, r9
 8001c94:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ca4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ca8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cac:	ebb2 040a 	subs.w	r4, r2, sl
 8001cb0:	eb63 050b 	sbc.w	r5, r3, fp
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	00eb      	lsls	r3, r5, #3
 8001cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cc2:	00e2      	lsls	r2, r4, #3
 8001cc4:	4614      	mov	r4, r2
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	4643      	mov	r3, r8
 8001cca:	18e3      	adds	r3, r4, r3
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	464b      	mov	r3, r9
 8001cd0:	eb45 0303 	adc.w	r3, r5, r3
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	028b      	lsls	r3, r1, #10
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cec:	4621      	mov	r1, r4
 8001cee:	028a      	lsls	r2, r1, #10
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	61fa      	str	r2, [r7, #28]
 8001cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d00:	f7fe fa6e 	bl	80001e0 <__aeabi_uldivmod>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4613      	mov	r3, r2
 8001d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	0c1b      	lsrs	r3, r3, #16
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	3301      	adds	r3, #1
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d26:	e002      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3750      	adds	r7, #80	; 0x50
 8001d34:	46bd      	mov	sp, r7
 8001d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	00f42400 	.word	0x00f42400
 8001d44:	007a1200 	.word	0x007a1200

08001d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000000 	.word	0x20000000

08001d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d64:	f7ff fff0 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	0a9b      	lsrs	r3, r3, #10
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4903      	ldr	r1, [pc, #12]	; (8001d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	08006520 	.word	0x08006520

08001d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d8c:	f7ff ffdc 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0b5b      	lsrs	r3, r3, #13
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4903      	ldr	r1, [pc, #12]	; (8001dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	08006520 	.word	0x08006520

08001db0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0203 	and.w	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	08db      	lsrs	r3, r3, #3
 8001dea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <HAL_RCC_GetClockConfig+0x60>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0207 	and.w	r2, r3, #7
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	601a      	str	r2, [r3, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e041      	b.n	8001eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f839 	bl	8001eb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	4610      	mov	r0, r2
 8001e54:	f000 f9ca 	bl	80021ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d001      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e044      	b.n	8001f6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <HAL_TIM_Base_Start_IT+0xb0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d018      	beq.n	8001f34 <HAL_TIM_Base_Start_IT+0x6c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0a:	d013      	beq.n	8001f34 <HAL_TIM_Base_Start_IT+0x6c>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1a      	ldr	r2, [pc, #104]	; (8001f7c <HAL_TIM_Base_Start_IT+0xb4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00e      	beq.n	8001f34 <HAL_TIM_Base_Start_IT+0x6c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_TIM_Base_Start_IT+0xb8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d009      	beq.n	8001f34 <HAL_TIM_Base_Start_IT+0x6c>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d004      	beq.n	8001f34 <HAL_TIM_Base_Start_IT+0x6c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d111      	bne.n	8001f58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d010      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0201 	orr.w	r2, r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f56:	e007      	b.n	8001f68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	40000400 	.word	0x40000400
 8001f80:	40000800 	.word	0x40000800
 8001f84:	40000c00 	.word	0x40000c00
 8001f88:	40014000 	.word	0x40014000

08001f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d122      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d11b      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0202 	mvn.w	r2, #2
 8001fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8ee 	bl	80021b0 <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f8e0 	bl	800219c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8f1 	bl	80021c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d122      	bne.n	800203c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b04      	cmp	r3, #4
 8002002:	d11b      	bne.n	800203c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0204 	mvn.w	r2, #4
 800200c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8c4 	bl	80021b0 <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f8b6 	bl	800219c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f8c7 	bl	80021c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b08      	cmp	r3, #8
 8002048:	d122      	bne.n	8002090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b08      	cmp	r3, #8
 8002056:	d11b      	bne.n	8002090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0208 	mvn.w	r2, #8
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2204      	movs	r2, #4
 8002066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f89a 	bl	80021b0 <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f88c 	bl	800219c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f89d 	bl	80021c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b10      	cmp	r3, #16
 800209c:	d122      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d11b      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0210 	mvn.w	r2, #16
 80020b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2208      	movs	r2, #8
 80020ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f870 	bl	80021b0 <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f862 	bl	800219c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f873 	bl	80021c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d10e      	bne.n	8002110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d107      	bne.n	8002110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0201 	mvn.w	r2, #1
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fd56 	bl	8000bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	2b80      	cmp	r3, #128	; 0x80
 800211c:	d10e      	bne.n	800213c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	2b80      	cmp	r3, #128	; 0x80
 800212a:	d107      	bne.n	800213c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f8e2 	bl	8002300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002146:	2b40      	cmp	r3, #64	; 0x40
 8002148:	d10e      	bne.n	8002168 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d107      	bne.n	8002168 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f838 	bl	80021d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b20      	cmp	r3, #32
 8002174:	d10e      	bne.n	8002194 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0320 	and.w	r3, r3, #32
 8002180:	2b20      	cmp	r3, #32
 8002182:	d107      	bne.n	8002194 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0220 	mvn.w	r2, #32
 800218c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f8ac 	bl	80022ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a34      	ldr	r2, [pc, #208]	; (80022d0 <TIM_Base_SetConfig+0xe4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00f      	beq.n	8002224 <TIM_Base_SetConfig+0x38>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220a:	d00b      	beq.n	8002224 <TIM_Base_SetConfig+0x38>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a31      	ldr	r2, [pc, #196]	; (80022d4 <TIM_Base_SetConfig+0xe8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d007      	beq.n	8002224 <TIM_Base_SetConfig+0x38>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a30      	ldr	r2, [pc, #192]	; (80022d8 <TIM_Base_SetConfig+0xec>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d003      	beq.n	8002224 <TIM_Base_SetConfig+0x38>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <TIM_Base_SetConfig+0xf0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d108      	bne.n	8002236 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a25      	ldr	r2, [pc, #148]	; (80022d0 <TIM_Base_SetConfig+0xe4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01b      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002244:	d017      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a22      	ldr	r2, [pc, #136]	; (80022d4 <TIM_Base_SetConfig+0xe8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <TIM_Base_SetConfig+0xec>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00f      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a20      	ldr	r2, [pc, #128]	; (80022dc <TIM_Base_SetConfig+0xf0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00b      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <TIM_Base_SetConfig+0xf4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <TIM_Base_SetConfig+0xf8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d003      	beq.n	8002276 <TIM_Base_SetConfig+0x8a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <TIM_Base_SetConfig+0xfc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d108      	bne.n	8002288 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <TIM_Base_SetConfig+0xe4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d103      	bne.n	80022bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	615a      	str	r2, [r3, #20]
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40010000 	.word	0x40010000
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40000800 	.word	0x40000800
 80022dc:	40000c00 	.word	0x40000c00
 80022e0:	40014000 	.word	0x40014000
 80022e4:	40014400 	.word	0x40014400
 80022e8:	40014800 	.word	0x40014800

080022ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e03f      	b.n	80023a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe fc82 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2224      	movs	r2, #36	; 0x24
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f929 	bl	80025b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800236c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800237c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800238c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b08a      	sub	sp, #40	; 0x28
 80023b2:	af02      	add	r7, sp, #8
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	4613      	mov	r3, r2
 80023bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d17c      	bne.n	80024c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HAL_UART_Transmit+0x2c>
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e075      	b.n	80024ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_UART_Transmit+0x3e>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e06e      	b.n	80024ca <HAL_UART_Transmit+0x11c>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2221      	movs	r2, #33	; 0x21
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002402:	f7fe fd75 	bl	8000ef0 <HAL_GetTick>
 8002406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	88fa      	ldrh	r2, [r7, #6]
 800240c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	88fa      	ldrh	r2, [r7, #6]
 8002412:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241c:	d108      	bne.n	8002430 <HAL_UART_Transmit+0x82>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d104      	bne.n	8002430 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	e003      	b.n	8002438 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002440:	e02a      	b.n	8002498 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2200      	movs	r2, #0
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f840 	bl	80024d2 <UART_WaitOnFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e036      	b.n	80024ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10b      	bne.n	800247a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002470:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	3302      	adds	r3, #2
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	e007      	b.n	800248a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	3301      	adds	r3, #1
 8002488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1cf      	bne.n	8002442 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2140      	movs	r1, #64	; 0x40
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f810 	bl	80024d2 <UART_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e006      	b.n	80024ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e000      	b.n	80024ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024c8:	2302      	movs	r3, #2
  }
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b090      	sub	sp, #64	; 0x40
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e2:	e050      	b.n	8002586 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ea:	d04c      	beq.n	8002586 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <UART_WaitOnFlagUntilTimeout+0x30>
 80024f2:	f7fe fcfd 	bl	8000ef0 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024fe:	429a      	cmp	r2, r3
 8002500:	d241      	bcs.n	8002586 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	330c      	adds	r3, #12
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	e853 3f00 	ldrex	r3, [r3]
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	330c      	adds	r3, #12
 8002520:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002522:	637a      	str	r2, [r7, #52]	; 0x34
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002526:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800252a:	e841 2300 	strex	r3, r2, [r1]
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1e5      	bne.n	8002502 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3314      	adds	r3, #20
 800253c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	e853 3f00 	ldrex	r3, [r3]
 8002544:	613b      	str	r3, [r7, #16]
   return(result);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	63bb      	str	r3, [r7, #56]	; 0x38
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3314      	adds	r3, #20
 8002554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002556:	623a      	str	r2, [r7, #32]
 8002558:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255a:	69f9      	ldr	r1, [r7, #28]
 800255c:	6a3a      	ldr	r2, [r7, #32]
 800255e:	e841 2300 	strex	r3, r2, [r1]
 8002562:	61bb      	str	r3, [r7, #24]
   return(result);
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1e5      	bne.n	8002536 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e00f      	b.n	80025a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4013      	ands	r3, r2
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	429a      	cmp	r2, r3
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d09f      	beq.n	80024e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3740      	adds	r7, #64	; 0x40
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b4:	b0c0      	sub	sp, #256	; 0x100
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025cc:	68d9      	ldr	r1, [r3, #12]
 80025ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	ea40 0301 	orr.w	r3, r0, r1
 80025d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002608:	f021 010c 	bic.w	r1, r1, #12
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002616:	430b      	orrs	r3, r1
 8002618:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800261a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262a:	6999      	ldr	r1, [r3, #24]
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	ea40 0301 	orr.w	r3, r0, r1
 8002636:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b8f      	ldr	r3, [pc, #572]	; (800287c <UART_SetConfig+0x2cc>)
 8002640:	429a      	cmp	r2, r3
 8002642:	d005      	beq.n	8002650 <UART_SetConfig+0xa0>
 8002644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b8d      	ldr	r3, [pc, #564]	; (8002880 <UART_SetConfig+0x2d0>)
 800264c:	429a      	cmp	r2, r3
 800264e:	d104      	bne.n	800265a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002650:	f7ff fb9a 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 8002654:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002658:	e003      	b.n	8002662 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800265a:	f7ff fb81 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 800265e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800266c:	f040 810c 	bne.w	8002888 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002674:	2200      	movs	r2, #0
 8002676:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800267a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800267e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002682:	4622      	mov	r2, r4
 8002684:	462b      	mov	r3, r5
 8002686:	1891      	adds	r1, r2, r2
 8002688:	65b9      	str	r1, [r7, #88]	; 0x58
 800268a:	415b      	adcs	r3, r3
 800268c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800268e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002692:	4621      	mov	r1, r4
 8002694:	eb12 0801 	adds.w	r8, r2, r1
 8002698:	4629      	mov	r1, r5
 800269a:	eb43 0901 	adc.w	r9, r3, r1
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026b2:	4690      	mov	r8, r2
 80026b4:	4699      	mov	r9, r3
 80026b6:	4623      	mov	r3, r4
 80026b8:	eb18 0303 	adds.w	r3, r8, r3
 80026bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026c0:	462b      	mov	r3, r5
 80026c2:	eb49 0303 	adc.w	r3, r9, r3
 80026c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026de:	460b      	mov	r3, r1
 80026e0:	18db      	adds	r3, r3, r3
 80026e2:	653b      	str	r3, [r7, #80]	; 0x50
 80026e4:	4613      	mov	r3, r2
 80026e6:	eb42 0303 	adc.w	r3, r2, r3
 80026ea:	657b      	str	r3, [r7, #84]	; 0x54
 80026ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026f4:	f7fd fd74 	bl	80001e0 <__aeabi_uldivmod>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4b61      	ldr	r3, [pc, #388]	; (8002884 <UART_SetConfig+0x2d4>)
 80026fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	011c      	lsls	r4, r3, #4
 8002706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800270a:	2200      	movs	r2, #0
 800270c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002710:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002714:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002718:	4642      	mov	r2, r8
 800271a:	464b      	mov	r3, r9
 800271c:	1891      	adds	r1, r2, r2
 800271e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002720:	415b      	adcs	r3, r3
 8002722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002724:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002728:	4641      	mov	r1, r8
 800272a:	eb12 0a01 	adds.w	sl, r2, r1
 800272e:	4649      	mov	r1, r9
 8002730:	eb43 0b01 	adc.w	fp, r3, r1
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002740:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002744:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002748:	4692      	mov	sl, r2
 800274a:	469b      	mov	fp, r3
 800274c:	4643      	mov	r3, r8
 800274e:	eb1a 0303 	adds.w	r3, sl, r3
 8002752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002756:	464b      	mov	r3, r9
 8002758:	eb4b 0303 	adc.w	r3, fp, r3
 800275c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800276c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002770:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002774:	460b      	mov	r3, r1
 8002776:	18db      	adds	r3, r3, r3
 8002778:	643b      	str	r3, [r7, #64]	; 0x40
 800277a:	4613      	mov	r3, r2
 800277c:	eb42 0303 	adc.w	r3, r2, r3
 8002780:	647b      	str	r3, [r7, #68]	; 0x44
 8002782:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002786:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800278a:	f7fd fd29 	bl	80001e0 <__aeabi_uldivmod>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4611      	mov	r1, r2
 8002794:	4b3b      	ldr	r3, [pc, #236]	; (8002884 <UART_SetConfig+0x2d4>)
 8002796:	fba3 2301 	umull	r2, r3, r3, r1
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2264      	movs	r2, #100	; 0x64
 800279e:	fb02 f303 	mul.w	r3, r2, r3
 80027a2:	1acb      	subs	r3, r1, r3
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027aa:	4b36      	ldr	r3, [pc, #216]	; (8002884 <UART_SetConfig+0x2d4>)
 80027ac:	fba3 2302 	umull	r2, r3, r3, r2
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027b8:	441c      	add	r4, r3
 80027ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027be:	2200      	movs	r2, #0
 80027c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027cc:	4642      	mov	r2, r8
 80027ce:	464b      	mov	r3, r9
 80027d0:	1891      	adds	r1, r2, r2
 80027d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80027d4:	415b      	adcs	r3, r3
 80027d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027dc:	4641      	mov	r1, r8
 80027de:	1851      	adds	r1, r2, r1
 80027e0:	6339      	str	r1, [r7, #48]	; 0x30
 80027e2:	4649      	mov	r1, r9
 80027e4:	414b      	adcs	r3, r1
 80027e6:	637b      	str	r3, [r7, #52]	; 0x34
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027f4:	4659      	mov	r1, fp
 80027f6:	00cb      	lsls	r3, r1, #3
 80027f8:	4651      	mov	r1, sl
 80027fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027fe:	4651      	mov	r1, sl
 8002800:	00ca      	lsls	r2, r1, #3
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	4603      	mov	r3, r0
 8002808:	4642      	mov	r2, r8
 800280a:	189b      	adds	r3, r3, r2
 800280c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002810:	464b      	mov	r3, r9
 8002812:	460a      	mov	r2, r1
 8002814:	eb42 0303 	adc.w	r3, r2, r3
 8002818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800281c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002828:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800282c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002830:	460b      	mov	r3, r1
 8002832:	18db      	adds	r3, r3, r3
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
 8002836:	4613      	mov	r3, r2
 8002838:	eb42 0303 	adc.w	r3, r2, r3
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002842:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002846:	f7fd fccb 	bl	80001e0 <__aeabi_uldivmod>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <UART_SetConfig+0x2d4>)
 8002850:	fba3 1302 	umull	r1, r3, r3, r2
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	2164      	movs	r1, #100	; 0x64
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	3332      	adds	r3, #50	; 0x32
 8002862:	4a08      	ldr	r2, [pc, #32]	; (8002884 <UART_SetConfig+0x2d4>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	f003 0207 	and.w	r2, r3, #7
 800286e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4422      	add	r2, r4
 8002876:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002878:	e105      	b.n	8002a86 <UART_SetConfig+0x4d6>
 800287a:	bf00      	nop
 800287c:	40011000 	.word	0x40011000
 8002880:	40011400 	.word	0x40011400
 8002884:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800288c:	2200      	movs	r2, #0
 800288e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002892:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002896:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800289a:	4642      	mov	r2, r8
 800289c:	464b      	mov	r3, r9
 800289e:	1891      	adds	r1, r2, r2
 80028a0:	6239      	str	r1, [r7, #32]
 80028a2:	415b      	adcs	r3, r3
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028aa:	4641      	mov	r1, r8
 80028ac:	1854      	adds	r4, r2, r1
 80028ae:	4649      	mov	r1, r9
 80028b0:	eb43 0501 	adc.w	r5, r3, r1
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	00eb      	lsls	r3, r5, #3
 80028be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028c2:	00e2      	lsls	r2, r4, #3
 80028c4:	4614      	mov	r4, r2
 80028c6:	461d      	mov	r5, r3
 80028c8:	4643      	mov	r3, r8
 80028ca:	18e3      	adds	r3, r4, r3
 80028cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028d0:	464b      	mov	r3, r9
 80028d2:	eb45 0303 	adc.w	r3, r5, r3
 80028d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028f6:	4629      	mov	r1, r5
 80028f8:	008b      	lsls	r3, r1, #2
 80028fa:	4621      	mov	r1, r4
 80028fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002900:	4621      	mov	r1, r4
 8002902:	008a      	lsls	r2, r1, #2
 8002904:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002908:	f7fd fc6a 	bl	80001e0 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4b60      	ldr	r3, [pc, #384]	; (8002a94 <UART_SetConfig+0x4e4>)
 8002912:	fba3 2302 	umull	r2, r3, r3, r2
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	011c      	lsls	r4, r3, #4
 800291a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002924:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002928:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800292c:	4642      	mov	r2, r8
 800292e:	464b      	mov	r3, r9
 8002930:	1891      	adds	r1, r2, r2
 8002932:	61b9      	str	r1, [r7, #24]
 8002934:	415b      	adcs	r3, r3
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800293c:	4641      	mov	r1, r8
 800293e:	1851      	adds	r1, r2, r1
 8002940:	6139      	str	r1, [r7, #16]
 8002942:	4649      	mov	r1, r9
 8002944:	414b      	adcs	r3, r1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002954:	4659      	mov	r1, fp
 8002956:	00cb      	lsls	r3, r1, #3
 8002958:	4651      	mov	r1, sl
 800295a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800295e:	4651      	mov	r1, sl
 8002960:	00ca      	lsls	r2, r1, #3
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	4603      	mov	r3, r0
 8002968:	4642      	mov	r2, r8
 800296a:	189b      	adds	r3, r3, r2
 800296c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002970:	464b      	mov	r3, r9
 8002972:	460a      	mov	r2, r1
 8002974:	eb42 0303 	adc.w	r3, r2, r3
 8002978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	67bb      	str	r3, [r7, #120]	; 0x78
 8002986:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002994:	4649      	mov	r1, r9
 8002996:	008b      	lsls	r3, r1, #2
 8002998:	4641      	mov	r1, r8
 800299a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800299e:	4641      	mov	r1, r8
 80029a0:	008a      	lsls	r2, r1, #2
 80029a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029a6:	f7fd fc1b 	bl	80001e0 <__aeabi_uldivmod>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4b39      	ldr	r3, [pc, #228]	; (8002a94 <UART_SetConfig+0x4e4>)
 80029b0:	fba3 1302 	umull	r1, r3, r3, r2
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	2164      	movs	r1, #100	; 0x64
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	3332      	adds	r3, #50	; 0x32
 80029c2:	4a34      	ldr	r2, [pc, #208]	; (8002a94 <UART_SetConfig+0x4e4>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ce:	441c      	add	r4, r3
 80029d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029d4:	2200      	movs	r2, #0
 80029d6:	673b      	str	r3, [r7, #112]	; 0x70
 80029d8:	677a      	str	r2, [r7, #116]	; 0x74
 80029da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029de:	4642      	mov	r2, r8
 80029e0:	464b      	mov	r3, r9
 80029e2:	1891      	adds	r1, r2, r2
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	415b      	adcs	r3, r3
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ee:	4641      	mov	r1, r8
 80029f0:	1851      	adds	r1, r2, r1
 80029f2:	6039      	str	r1, [r7, #0]
 80029f4:	4649      	mov	r1, r9
 80029f6:	414b      	adcs	r3, r1
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a06:	4659      	mov	r1, fp
 8002a08:	00cb      	lsls	r3, r1, #3
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a10:	4651      	mov	r1, sl
 8002a12:	00ca      	lsls	r2, r1, #3
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4642      	mov	r2, r8
 8002a1c:	189b      	adds	r3, r3, r2
 8002a1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a20:	464b      	mov	r3, r9
 8002a22:	460a      	mov	r2, r1
 8002a24:	eb42 0303 	adc.w	r3, r2, r3
 8002a28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	663b      	str	r3, [r7, #96]	; 0x60
 8002a34:	667a      	str	r2, [r7, #100]	; 0x64
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a42:	4649      	mov	r1, r9
 8002a44:	008b      	lsls	r3, r1, #2
 8002a46:	4641      	mov	r1, r8
 8002a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a4c:	4641      	mov	r1, r8
 8002a4e:	008a      	lsls	r2, r1, #2
 8002a50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a54:	f7fd fbc4 	bl	80001e0 <__aeabi_uldivmod>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <UART_SetConfig+0x4e4>)
 8002a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2164      	movs	r1, #100	; 0x64
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	3332      	adds	r3, #50	; 0x32
 8002a70:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <UART_SetConfig+0x4e4>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	f003 020f 	and.w	r2, r3, #15
 8002a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4422      	add	r2, r4
 8002a84:	609a      	str	r2, [r3, #8]
}
 8002a86:	bf00      	nop
 8002a88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a92:	bf00      	nop
 8002a94:	51eb851f 	.word	0x51eb851f

08002a98 <__NVIC_SetPriority>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db0a      	blt.n	8002ac2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	490c      	ldr	r1, [pc, #48]	; (8002ae4 <__NVIC_SetPriority+0x4c>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	440b      	add	r3, r1
 8002abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ac0:	e00a      	b.n	8002ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4908      	ldr	r1, [pc, #32]	; (8002ae8 <__NVIC_SetPriority+0x50>)
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3b04      	subs	r3, #4
 8002ad0:	0112      	lsls	r2, r2, #4
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	761a      	strb	r2, [r3, #24]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000e100 	.word	0xe000e100
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <SysTick_Handler+0x1c>)
 8002af2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002af4:	f002 fa70 	bl	8004fd8 <xTaskGetSchedulerState>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d001      	beq.n	8002b02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002afe:	f003 f953 	bl	8005da8 <xPortSysTickHandler>
  }
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	e000e010 	.word	0xe000e010

08002b0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002b10:	2100      	movs	r1, #0
 8002b12:	f06f 0004 	mvn.w	r0, #4
 8002b16:	f7ff ffbf 	bl	8002a98 <__NVIC_SetPriority>
#endif
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b26:	f3ef 8305 	mrs	r3, IPSR
 8002b2a:	603b      	str	r3, [r7, #0]
  return(result);
 8002b2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002b32:	f06f 0305 	mvn.w	r3, #5
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	e00c      	b.n	8002b54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <osKernelInitialize+0x44>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <osKernelInitialize+0x44>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	e002      	b.n	8002b54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b54:	687b      	ldr	r3, [r7, #4]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	200000e4 	.word	0x200000e4

08002b68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b6e:	f3ef 8305 	mrs	r3, IPSR
 8002b72:	603b      	str	r3, [r7, #0]
  return(result);
 8002b74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002b7a:	f06f 0305 	mvn.w	r3, #5
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	e010      	b.n	8002ba4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b82:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <osKernelStart+0x48>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d109      	bne.n	8002b9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002b8a:	f7ff ffbf 	bl	8002b0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <osKernelStart+0x48>)
 8002b90:	2202      	movs	r2, #2
 8002b92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b94:	f001 fdd8 	bl	8004748 <vTaskStartScheduler>
      stat = osOK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	e002      	b.n	8002ba4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ba4:	687b      	ldr	r3, [r7, #4]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200000e4 	.word	0x200000e4

08002bb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08e      	sub	sp, #56	; 0x38
 8002bb8:	af04      	add	r7, sp, #16
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bc4:	f3ef 8305 	mrs	r3, IPSR
 8002bc8:	617b      	str	r3, [r7, #20]
  return(result);
 8002bca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d17e      	bne.n	8002cce <osThreadNew+0x11a>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d07b      	beq.n	8002cce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002bda:	2318      	movs	r3, #24
 8002bdc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295
 8002be6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d045      	beq.n	8002c7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <osThreadNew+0x48>
        name = attr->name;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <osThreadNew+0x6e>
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2b38      	cmp	r3, #56	; 0x38
 8002c14:	d805      	bhi.n	8002c22 <osThreadNew+0x6e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <osThreadNew+0x72>
        return (NULL);
 8002c22:	2300      	movs	r3, #0
 8002c24:	e054      	b.n	8002cd0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00e      	beq.n	8002c5c <osThreadNew+0xa8>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b5b      	cmp	r3, #91	; 0x5b
 8002c44:	d90a      	bls.n	8002c5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <osThreadNew+0xa8>
        mem = 1;
 8002c56:	2301      	movs	r3, #1
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	e010      	b.n	8002c7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10c      	bne.n	8002c7e <osThreadNew+0xca>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d108      	bne.n	8002c7e <osThreadNew+0xca>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d104      	bne.n	8002c7e <osThreadNew+0xca>
          mem = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	e001      	b.n	8002c7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d110      	bne.n	8002ca6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c8c:	9202      	str	r2, [sp, #8]
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	6a3a      	ldr	r2, [r7, #32]
 8002c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f001 fb7e 	bl	800439c <xTaskCreateStatic>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	e013      	b.n	8002cce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d110      	bne.n	8002cce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f001 fbc9 	bl	8004456 <xTaskCreate>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d001      	beq.n	8002cce <osThreadNew+0x11a>
            hTask = NULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002cce:	693b      	ldr	r3, [r7, #16]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3728      	adds	r7, #40	; 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ce0:	f3ef 8305 	mrs	r3, IPSR
 8002ce4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ce6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <osDelay+0x1c>
    stat = osErrorISR;
 8002cec:	f06f 0305 	mvn.w	r3, #5
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	e007      	b.n	8002d04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f001 fcee 	bl	80046e0 <vTaskDelay>
    }
  }

  return (stat);
 8002d04:	68fb      	ldr	r3, [r7, #12]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b08a      	sub	sp, #40	; 0x28
 8002d12:	af02      	add	r7, sp, #8
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d1e:	f3ef 8305 	mrs	r3, IPSR
 8002d22:	613b      	str	r3, [r7, #16]
  return(result);
 8002d24:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d175      	bne.n	8002e16 <osSemaphoreNew+0x108>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d072      	beq.n	8002e16 <osSemaphoreNew+0x108>
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d86e      	bhi.n	8002e16 <osSemaphoreNew+0x108>
    mem = -1;
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d015      	beq.n	8002d70 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <osSemaphoreNew+0x4c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b4f      	cmp	r3, #79	; 0x4f
 8002d52:	d902      	bls.n	8002d5a <osSemaphoreNew+0x4c>
        mem = 1;
 8002d54:	2301      	movs	r3, #1
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	e00c      	b.n	8002d74 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d108      	bne.n	8002d74 <osSemaphoreNew+0x66>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <osSemaphoreNew+0x66>
          mem = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	e001      	b.n	8002d74 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d04c      	beq.n	8002e16 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d128      	bne.n	8002dd4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d10a      	bne.n	8002d9e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	9200      	str	r2, [sp, #0]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2100      	movs	r1, #0
 8002d94:	2001      	movs	r0, #1
 8002d96:	f000 fb5b 	bl	8003450 <xQueueGenericCreateStatic>
 8002d9a:	61f8      	str	r0, [r7, #28]
 8002d9c:	e005      	b.n	8002daa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002d9e:	2203      	movs	r2, #3
 8002da0:	2100      	movs	r1, #0
 8002da2:	2001      	movs	r0, #1
 8002da4:	f000 fbcc 	bl	8003540 <xQueueGenericCreate>
 8002da8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d022      	beq.n	8002df6 <osSemaphoreNew+0xe8>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01f      	beq.n	8002df6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002db6:	2300      	movs	r3, #0
 8002db8:	2200      	movs	r2, #0
 8002dba:	2100      	movs	r1, #0
 8002dbc:	69f8      	ldr	r0, [r7, #28]
 8002dbe:	f000 fc87 	bl	80036d0 <xQueueGenericSend>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d016      	beq.n	8002df6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002dc8:	69f8      	ldr	r0, [r7, #28]
 8002dca:	f001 f913 	bl	8003ff4 <vQueueDelete>
            hSemaphore = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	e010      	b.n	8002df6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d108      	bne.n	8002dec <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fc09 	bl	80035fa <xQueueCreateCountingSemaphoreStatic>
 8002de8:	61f8      	str	r0, [r7, #28]
 8002dea:	e004      	b.n	8002df6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fc3a 	bl	8003668 <xQueueCreateCountingSemaphore>
 8002df4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00c      	beq.n	8002e16 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <osSemaphoreNew+0xfc>
          name = attr->name;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e001      	b.n	8002e0e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002e0e:	6979      	ldr	r1, [r7, #20]
 8002e10:	69f8      	ldr	r0, [r7, #28]
 8002e12:	f001 fa3b 	bl	800428c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002e16:	69fb      	ldr	r3, [r7, #28]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d103      	bne.n	8002e40 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002e38:	f06f 0303 	mvn.w	r3, #3
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e039      	b.n	8002eb4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e40:	f3ef 8305 	mrs	r3, IPSR
 8002e44:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e46:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d022      	beq.n	8002e92 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002e52:	f06f 0303 	mvn.w	r3, #3
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	e02c      	b.n	8002eb4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002e5e:	f107 0308 	add.w	r3, r7, #8
 8002e62:	461a      	mov	r2, r3
 8002e64:	2100      	movs	r1, #0
 8002e66:	6938      	ldr	r0, [r7, #16]
 8002e68:	f001 f844 	bl	8003ef4 <xQueueReceiveFromISR>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d003      	beq.n	8002e7a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002e72:	f06f 0302 	mvn.w	r3, #2
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e01c      	b.n	8002eb4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d019      	beq.n	8002eb4 <osSemaphoreAcquire+0x94>
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <osSemaphoreAcquire+0xa0>)
 8002e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	e010      	b.n	8002eb4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002e92:	6839      	ldr	r1, [r7, #0]
 8002e94:	6938      	ldr	r0, [r7, #16]
 8002e96:	f000 ff21 	bl	8003cdc <xQueueSemaphoreTake>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d009      	beq.n	8002eb4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002ea6:	f06f 0301 	mvn.w	r3, #1
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e002      	b.n	8002eb4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002eae:	f06f 0302 	mvn.w	r3, #2
 8002eb2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002eb4:	697b      	ldr	r3, [r7, #20]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	e000ed04 	.word	0xe000ed04

08002ec4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002eda:	f06f 0303 	mvn.w	r3, #3
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	e02c      	b.n	8002f3c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ee2:	f3ef 8305 	mrs	r3, IPSR
 8002ee6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01a      	beq.n	8002f24 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002ef2:	f107 0308 	add.w	r3, r7, #8
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	6938      	ldr	r0, [r7, #16]
 8002efa:	f000 fd82 	bl	8003a02 <xQueueGiveFromISR>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d003      	beq.n	8002f0c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002f04:	f06f 0302 	mvn.w	r3, #2
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	e017      	b.n	8002f3c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d014      	beq.n	8002f3c <osSemaphoreRelease+0x78>
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <osSemaphoreRelease+0x84>)
 8002f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	e00b      	b.n	8002f3c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002f24:	2300      	movs	r3, #0
 8002f26:	2200      	movs	r2, #0
 8002f28:	2100      	movs	r1, #0
 8002f2a:	6938      	ldr	r0, [r7, #16]
 8002f2c:	f000 fbd0 	bl	80036d0 <xQueueGenericSend>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d002      	beq.n	8002f3c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002f36:	f06f 0302 	mvn.w	r3, #2
 8002f3a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002f3c:	697b      	ldr	r3, [r7, #20]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	e000ed04 	.word	0xe000ed04

08002f4c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f5c:	f3ef 8305 	mrs	r3, IPSR
 8002f60:	613b      	str	r3, [r7, #16]
  return(result);
 8002f62:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d15f      	bne.n	8003028 <osMessageQueueNew+0xdc>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d05c      	beq.n	8003028 <osMessageQueueNew+0xdc>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d059      	beq.n	8003028 <osMessageQueueNew+0xdc>
    mem = -1;
 8002f74:	f04f 33ff 	mov.w	r3, #4294967295
 8002f78:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d029      	beq.n	8002fd4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d012      	beq.n	8002fae <osMessageQueueNew+0x62>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b4f      	cmp	r3, #79	; 0x4f
 8002f8e:	d90e      	bls.n	8002fae <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d302      	bcc.n	8002fae <osMessageQueueNew+0x62>
        mem = 1;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	e014      	b.n	8002fd8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d110      	bne.n	8002fd8 <osMessageQueueNew+0x8c>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10c      	bne.n	8002fd8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d108      	bne.n	8002fd8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d104      	bne.n	8002fd8 <osMessageQueueNew+0x8c>
          mem = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	e001      	b.n	8002fd8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d10b      	bne.n	8002ff6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	9100      	str	r1, [sp, #0]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fa2f 	bl	8003450 <xQueueGenericCreateStatic>
 8002ff2:	61f8      	str	r0, [r7, #28]
 8002ff4:	e008      	b.n	8003008 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fa9d 	bl	8003540 <xQueueGenericCreate>
 8003006:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00c      	beq.n	8003028 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <osMessageQueueNew+0xd0>
        name = attr->name;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	e001      	b.n	8003020 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003020:	6979      	ldr	r1, [r7, #20]
 8003022:	69f8      	ldr	r0, [r7, #28]
 8003024:	f001 f932 	bl	800428c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003028:	69fb      	ldr	r3, [r7, #28]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800304c:	f3ef 8305 	mrs	r3, IPSR
 8003050:	617b      	str	r3, [r7, #20]
  return(result);
 8003052:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003054:	2b00      	cmp	r3, #0
 8003056:	d028      	beq.n	80030aa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <osMessageQueuePut+0x36>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <osMessageQueuePut+0x36>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800306a:	f06f 0303 	mvn.w	r3, #3
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	e038      	b.n	80030e4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003076:	f107 0210 	add.w	r2, r7, #16
 800307a:	2300      	movs	r3, #0
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	69b8      	ldr	r0, [r7, #24]
 8003080:	f000 fc24 	bl	80038cc <xQueueGenericSendFromISR>
 8003084:	4603      	mov	r3, r0
 8003086:	2b01      	cmp	r3, #1
 8003088:	d003      	beq.n	8003092 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800308a:	f06f 0302 	mvn.w	r3, #2
 800308e:	61fb      	str	r3, [r7, #28]
 8003090:	e028      	b.n	80030e4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d025      	beq.n	80030e4 <osMessageQueuePut+0xb0>
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <osMessageQueuePut+0xbc>)
 800309a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	e01c      	b.n	80030e4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <osMessageQueuePut+0x82>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80030b6:	f06f 0303 	mvn.w	r3, #3
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	e012      	b.n	80030e4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80030be:	2300      	movs	r3, #0
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	69b8      	ldr	r0, [r7, #24]
 80030c6:	f000 fb03 	bl	80036d0 <xQueueGenericSend>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d009      	beq.n	80030e4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80030d6:	f06f 0301 	mvn.w	r3, #1
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	e002      	b.n	80030e4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80030de:	f06f 0302 	mvn.w	r3, #2
 80030e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80030e4:	69fb      	ldr	r3, [r7, #28]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000ed04 	.word	0xe000ed04

080030f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800310a:	f3ef 8305 	mrs	r3, IPSR
 800310e:	617b      	str	r3, [r7, #20]
  return(result);
 8003110:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003112:	2b00      	cmp	r3, #0
 8003114:	d028      	beq.n	8003168 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <osMessageQueueGet+0x34>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <osMessageQueueGet+0x34>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003128:	f06f 0303 	mvn.w	r3, #3
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	e037      	b.n	80031a0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	461a      	mov	r2, r3
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	69b8      	ldr	r0, [r7, #24]
 800313e:	f000 fed9 	bl	8003ef4 <xQueueReceiveFromISR>
 8003142:	4603      	mov	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	d003      	beq.n	8003150 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003148:	f06f 0302 	mvn.w	r3, #2
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	e027      	b.n	80031a0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d024      	beq.n	80031a0 <osMessageQueueGet+0xac>
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <osMessageQueueGet+0xb8>)
 8003158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	e01b      	b.n	80031a0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <osMessageQueueGet+0x80>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003174:	f06f 0303 	mvn.w	r3, #3
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e011      	b.n	80031a0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	69b8      	ldr	r0, [r7, #24]
 8003182:	f000 fccb 	bl	8003b1c <xQueueReceive>
 8003186:	4603      	mov	r3, r0
 8003188:	2b01      	cmp	r3, #1
 800318a:	d009      	beq.n	80031a0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003192:	f06f 0301 	mvn.w	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	e002      	b.n	80031a0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800319a:	f06f 0302 	mvn.w	r3, #2
 800319e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80031a0:	69fb      	ldr	r3, [r7, #28]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	e000ed04 	.word	0xe000ed04

080031b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a07      	ldr	r2, [pc, #28]	; (80031dc <vApplicationGetIdleTaskMemory+0x2c>)
 80031c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4a06      	ldr	r2, [pc, #24]	; (80031e0 <vApplicationGetIdleTaskMemory+0x30>)
 80031c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	601a      	str	r2, [r3, #0]
}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	200000e8 	.word	0x200000e8
 80031e0:	20000144 	.word	0x20000144

080031e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4a07      	ldr	r2, [pc, #28]	; (8003210 <vApplicationGetTimerTaskMemory+0x2c>)
 80031f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4a06      	ldr	r2, [pc, #24]	; (8003214 <vApplicationGetTimerTaskMemory+0x30>)
 80031fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003202:	601a      	str	r2, [r3, #0]
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	20000344 	.word	0x20000344
 8003214:	200003a0 	.word	0x200003a0

08003218 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f103 0208 	add.w	r2, r3, #8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f04f 32ff 	mov.w	r2, #4294967295
 8003230:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f103 0208 	add.w	r2, r3, #8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f103 0208 	add.w	r2, r3, #8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	601a      	str	r2, [r3, #0]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032ba:	b480      	push	{r7}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d103      	bne.n	80032da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e00c      	b.n	80032f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3308      	adds	r3, #8
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e002      	b.n	80032e8 <vListInsert+0x2e>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d2f6      	bcs.n	80032e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	601a      	str	r2, [r3, #0]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6892      	ldr	r2, [r2, #8]
 8003342:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6852      	ldr	r2, [r2, #4]
 800334c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	d103      	bne.n	8003360 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	1e5a      	subs	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033aa:	f002 fc6b 	bl	8005c84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b6:	68f9      	ldr	r1, [r7, #12]
 80033b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	441a      	add	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033da:	3b01      	subs	r3, #1
 80033dc:	68f9      	ldr	r1, [r7, #12]
 80033de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	441a      	add	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	22ff      	movs	r2, #255	; 0xff
 80033ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	22ff      	movs	r2, #255	; 0xff
 80033f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d114      	bne.n	800342a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3310      	adds	r3, #16
 800340c:	4618      	mov	r0, r3
 800340e:	f001 fc25 	bl	8004c5c <xTaskRemoveFromEventList>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d012      	beq.n	800343e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <xQueueGenericReset+0xcc>)
 800341a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	e009      	b.n	800343e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3310      	adds	r3, #16
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fef2 	bl	8003218 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3324      	adds	r3, #36	; 0x24
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff feed 	bl	8003218 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800343e:	f002 fc51 	bl	8005ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003442:	2301      	movs	r3, #1
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	e000ed04 	.word	0xe000ed04

08003450 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08e      	sub	sp, #56	; 0x38
 8003454:	af02      	add	r7, sp, #8
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003476:	bf00      	nop
 8003478:	e7fe      	b.n	8003478 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10a      	bne.n	8003496 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003492:	bf00      	nop
 8003494:	e7fe      	b.n	8003494 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <xQueueGenericCreateStatic+0x52>
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <xQueueGenericCreateStatic+0x56>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <xQueueGenericCreateStatic+0x58>
 80034a6:	2300      	movs	r3, #0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	623b      	str	r3, [r7, #32]
}
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <xQueueGenericCreateStatic+0x7e>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <xQueueGenericCreateStatic+0x82>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <xQueueGenericCreateStatic+0x84>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	61fb      	str	r3, [r7, #28]
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034ee:	2350      	movs	r3, #80	; 0x50
 80034f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b50      	cmp	r3, #80	; 0x50
 80034f6:	d00a      	beq.n	800350e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	61bb      	str	r3, [r7, #24]
}
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800350e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003522:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4613      	mov	r3, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f83f 	bl	80035b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003538:	4618      	mov	r0, r3
 800353a:	3730      	adds	r7, #48	; 0x30
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	4613      	mov	r3, r2
 800354c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	613b      	str	r3, [r7, #16]
}
 8003566:	bf00      	nop
 8003568:	e7fe      	b.n	8003568 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	3350      	adds	r3, #80	; 0x50
 8003578:	4618      	mov	r0, r3
 800357a:	f002 fca5 	bl	8005ec8 <pvPortMalloc>
 800357e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d011      	beq.n	80035aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	3350      	adds	r3, #80	; 0x50
 800358e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003598:	79fa      	ldrb	r2, [r7, #7]
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	4613      	mov	r3, r2
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f805 	bl	80035b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035aa:	69bb      	ldr	r3, [r7, #24]
	}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e002      	b.n	80035d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035e2:	2101      	movs	r1, #1
 80035e4:	69b8      	ldr	r0, [r7, #24]
 80035e6:	f7ff fecb 	bl	8003380 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b08a      	sub	sp, #40	; 0x28
 80035fe:	af02      	add	r7, sp, #8
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	61bb      	str	r3, [r7, #24]
}
 800361e:	bf00      	nop
 8003620:	e7fe      	b.n	8003620 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	429a      	cmp	r2, r3
 8003628:	d90a      	bls.n	8003640 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	617b      	str	r3, [r7, #20]
}
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003640:	2302      	movs	r3, #2
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	2100      	movs	r1, #0
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7ff ff00 	bl	8003450 <xQueueGenericCreateStatic>
 8003650:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800365e:	69fb      	ldr	r3, [r7, #28]
	}
 8003660:	4618      	mov	r0, r3
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	613b      	str	r3, [r7, #16]
}
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	429a      	cmp	r2, r3
 8003694:	d90a      	bls.n	80036ac <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	60fb      	str	r3, [r7, #12]
}
 80036a8:	bf00      	nop
 80036aa:	e7fe      	b.n	80036aa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80036ac:	2202      	movs	r2, #2
 80036ae:	2100      	movs	r1, #0
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff45 	bl	8003540 <xQueueGenericCreate>
 80036b6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80036c4:	697b      	ldr	r3, [r7, #20]
	}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	; 0x38
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036de:	2300      	movs	r3, #0
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <xQueueGenericSend+0x32>
	__asm volatile
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036fe:	bf00      	nop
 8003700:	e7fe      	b.n	8003700 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d103      	bne.n	8003710 <xQueueGenericSend+0x40>
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <xQueueGenericSend+0x44>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <xQueueGenericSend+0x46>
 8003714:	2300      	movs	r3, #0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <xQueueGenericSend+0x60>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800372c:	bf00      	nop
 800372e:	e7fe      	b.n	800372e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d103      	bne.n	800373e <xQueueGenericSend+0x6e>
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <xQueueGenericSend+0x72>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <xQueueGenericSend+0x74>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <xQueueGenericSend+0x8e>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	623b      	str	r3, [r7, #32]
}
 800375a:	bf00      	nop
 800375c:	e7fe      	b.n	800375c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800375e:	f001 fc3b 	bl	8004fd8 <xTaskGetSchedulerState>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <xQueueGenericSend+0x9e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <xQueueGenericSend+0xa2>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <xQueueGenericSend+0xa4>
 8003772:	2300      	movs	r3, #0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <xQueueGenericSend+0xbe>
	__asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	61fb      	str	r3, [r7, #28]
}
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800378e:	f002 fa79 	bl	8005c84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <xQueueGenericSend+0xd4>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d129      	bne.n	80037f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037aa:	f000 fc5e 	bl	800406a <prvCopyDataToQueue>
 80037ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d010      	beq.n	80037da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	3324      	adds	r3, #36	; 0x24
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 fa4d 	bl	8004c5c <xTaskRemoveFromEventList>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037c8:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <xQueueGenericSend+0x1f8>)
 80037ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	e00a      	b.n	80037f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037e0:	4b39      	ldr	r3, [pc, #228]	; (80038c8 <xQueueGenericSend+0x1f8>)
 80037e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037f0:	f002 fa78 	bl	8005ce4 <vPortExitCritical>
				return pdPASS;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e063      	b.n	80038c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037fe:	f002 fa71 	bl	8005ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003802:	2300      	movs	r3, #0
 8003804:	e05c      	b.n	80038c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800380c:	f107 0314 	add.w	r3, r7, #20
 8003810:	4618      	mov	r0, r3
 8003812:	f001 fa87 	bl	8004d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003816:	2301      	movs	r3, #1
 8003818:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800381a:	f002 fa63 	bl	8005ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800381e:	f000 fff9 	bl	8004814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003822:	f002 fa2f 	bl	8005c84 <vPortEnterCritical>
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800382c:	b25b      	sxtb	r3, r3
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003832:	d103      	bne.n	800383c <xQueueGenericSend+0x16c>
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003842:	b25b      	sxtb	r3, r3
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d103      	bne.n	8003852 <xQueueGenericSend+0x182>
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003852:	f002 fa47 	bl	8005ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003856:	1d3a      	adds	r2, r7, #4
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f001 fa76 	bl	8004d50 <xTaskCheckForTimeOut>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d124      	bne.n	80038b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800386a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800386c:	f000 fcf5 	bl	800425a <prvIsQueueFull>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d018      	beq.n	80038a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	3310      	adds	r3, #16
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f001 f99c 	bl	8004bbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003886:	f000 fc80 	bl	800418a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800388a:	f000 ffd1 	bl	8004830 <xTaskResumeAll>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	f47f af7c 	bne.w	800378e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003896:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <xQueueGenericSend+0x1f8>)
 8003898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	e772      	b.n	800378e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038aa:	f000 fc6e 	bl	800418a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038ae:	f000 ffbf 	bl	8004830 <xTaskResumeAll>
 80038b2:	e76c      	b.n	800378e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038b6:	f000 fc68 	bl	800418a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038ba:	f000 ffb9 	bl	8004830 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3738      	adds	r7, #56	; 0x38
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b090      	sub	sp, #64	; 0x40
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d103      	bne.n	8003908 <xQueueGenericSendFromISR+0x3c>
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <xQueueGenericSendFromISR+0x40>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <xQueueGenericSendFromISR+0x42>
 800390c:	2300      	movs	r3, #0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d103      	bne.n	8003936 <xQueueGenericSendFromISR+0x6a>
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <xQueueGenericSendFromISR+0x6e>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <xQueueGenericSendFromISR+0x70>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	623b      	str	r3, [r7, #32]
}
 8003952:	bf00      	nop
 8003954:	e7fe      	b.n	8003954 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003956:	f002 fa77 	bl	8005e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800395a:	f3ef 8211 	mrs	r2, BASEPRI
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	61fa      	str	r2, [r7, #28]
 8003970:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003972:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <xQueueGenericSendFromISR+0xbc>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d12f      	bne.n	80039e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800398e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800399e:	f000 fb64 	bl	800406a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80039a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039aa:	d112      	bne.n	80039d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d016      	beq.n	80039e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	3324      	adds	r3, #36	; 0x24
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 f94f 	bl	8004c5c <xTaskRemoveFromEventList>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00e      	beq.n	80039e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e007      	b.n	80039e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039d6:	3301      	adds	r3, #1
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	b25a      	sxtb	r2, r3
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80039e2:	2301      	movs	r3, #1
 80039e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80039e6:	e001      	b.n	80039ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3740      	adds	r7, #64	; 0x40
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b08e      	sub	sp, #56	; 0x38
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	623b      	str	r3, [r7, #32]
}
 8003a28:	bf00      	nop
 8003a2a:	e7fe      	b.n	8003a2a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <xQueueGiveFromISR+0x48>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	61fb      	str	r3, [r7, #28]
}
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <xQueueGiveFromISR+0x58>
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <xQueueGiveFromISR+0x5c>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <xQueueGiveFromISR+0x5e>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <xQueueGiveFromISR+0x78>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	61bb      	str	r3, [r7, #24]
}
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a7a:	f002 f9e5 	bl	8005e48 <vPortValidateInterruptPriority>
	__asm volatile
 8003a7e:	f3ef 8211 	mrs	r2, BASEPRI
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	617a      	str	r2, [r7, #20]
 8003a94:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003a96:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d22b      	bcs.n	8003b02 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003abc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d112      	bne.n	8003aec <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	3324      	adds	r3, #36	; 0x24
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f001 f8c2 	bl	8004c5c <xTaskRemoveFromEventList>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00e      	beq.n	8003afc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00b      	beq.n	8003afc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e007      	b.n	8003afc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003af0:	3301      	adds	r3, #1
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	b25a      	sxtb	r2, r3
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003afc:	2301      	movs	r3, #1
 8003afe:	637b      	str	r3, [r7, #52]	; 0x34
 8003b00:	e001      	b.n	8003b06 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	637b      	str	r3, [r7, #52]	; 0x34
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f383 8811 	msr	BASEPRI, r3
}
 8003b10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3738      	adds	r7, #56	; 0x38
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08c      	sub	sp, #48	; 0x30
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <xQueueReceive+0x30>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	623b      	str	r3, [r7, #32]
}
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <xQueueReceive+0x3e>
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <xQueueReceive+0x42>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <xQueueReceive+0x44>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10a      	bne.n	8003b7a <xQueueReceive+0x5e>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	61fb      	str	r3, [r7, #28]
}
 8003b76:	bf00      	nop
 8003b78:	e7fe      	b.n	8003b78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b7a:	f001 fa2d 	bl	8004fd8 <xTaskGetSchedulerState>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <xQueueReceive+0x6e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <xQueueReceive+0x72>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <xQueueReceive+0x74>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <xQueueReceive+0x8e>
	__asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	61bb      	str	r3, [r7, #24]
}
 8003ba6:	bf00      	nop
 8003ba8:	e7fe      	b.n	8003ba8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003baa:	f002 f86b 	bl	8005c84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01f      	beq.n	8003bfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bbe:	f000 fabe 	bl	800413e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	1e5a      	subs	r2, r3, #1
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00f      	beq.n	8003bf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd4:	3310      	adds	r3, #16
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 f840 	bl	8004c5c <xTaskRemoveFromEventList>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003be2:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <xQueueReceive+0x1bc>)
 8003be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bf2:	f002 f877 	bl	8005ce4 <vPortExitCritical>
				return pdPASS;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e069      	b.n	8003cce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c00:	f002 f870 	bl	8005ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e062      	b.n	8003cce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c0e:	f107 0310 	add.w	r3, r7, #16
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 f886 	bl	8004d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c1c:	f002 f862 	bl	8005ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c20:	f000 fdf8 	bl	8004814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c24:	f002 f82e 	bl	8005c84 <vPortEnterCritical>
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c2e:	b25b      	sxtb	r3, r3
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d103      	bne.n	8003c3e <xQueueReceive+0x122>
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c44:	b25b      	sxtb	r3, r3
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d103      	bne.n	8003c54 <xQueueReceive+0x138>
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c54:	f002 f846 	bl	8005ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c58:	1d3a      	adds	r2, r7, #4
 8003c5a:	f107 0310 	add.w	r3, r7, #16
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 f875 	bl	8004d50 <xTaskCheckForTimeOut>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d123      	bne.n	8003cb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c6e:	f000 fade 	bl	800422e <prvIsQueueEmpty>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d017      	beq.n	8003ca8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	3324      	adds	r3, #36	; 0x24
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 ff9b 	bl	8004bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c88:	f000 fa7f 	bl	800418a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c8c:	f000 fdd0 	bl	8004830 <xTaskResumeAll>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d189      	bne.n	8003baa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <xQueueReceive+0x1bc>)
 8003c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	e780      	b.n	8003baa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003caa:	f000 fa6e 	bl	800418a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cae:	f000 fdbf 	bl	8004830 <xTaskResumeAll>
 8003cb2:	e77a      	b.n	8003baa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cb6:	f000 fa68 	bl	800418a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cba:	f000 fdb9 	bl	8004830 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cc0:	f000 fab5 	bl	800422e <prvIsQueueEmpty>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f43f af6f 	beq.w	8003baa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ccc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3730      	adds	r7, #48	; 0x30
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08e      	sub	sp, #56	; 0x38
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	623b      	str	r3, [r7, #32]
}
 8003d0a:	bf00      	nop
 8003d0c:	e7fe      	b.n	8003d0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	61fb      	str	r3, [r7, #28]
}
 8003d28:	bf00      	nop
 8003d2a:	e7fe      	b.n	8003d2a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d2c:	f001 f954 	bl	8004fd8 <xTaskGetSchedulerState>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <xQueueSemaphoreTake+0x60>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <xQueueSemaphoreTake+0x64>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <xQueueSemaphoreTake+0x66>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	61bb      	str	r3, [r7, #24]
}
 8003d58:	bf00      	nop
 8003d5a:	e7fe      	b.n	8003d5a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d5c:	f001 ff92 	bl	8005c84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d024      	beq.n	8003db6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	1e5a      	subs	r2, r3, #1
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d104      	bne.n	8003d86 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003d7c:	f001 faa2 	bl	80052c4 <pvTaskIncrementMutexHeldCount>
 8003d80:	4602      	mov	r2, r0
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00f      	beq.n	8003dae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	3310      	adds	r3, #16
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 ff62 	bl	8004c5c <xTaskRemoveFromEventList>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d9e:	4b54      	ldr	r3, [pc, #336]	; (8003ef0 <xQueueSemaphoreTake+0x214>)
 8003da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dae:	f001 ff99 	bl	8005ce4 <vPortExitCritical>
				return pdPASS;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e097      	b.n	8003ee6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d111      	bne.n	8003de0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	617b      	str	r3, [r7, #20]
}
 8003dd4:	bf00      	nop
 8003dd6:	e7fe      	b.n	8003dd6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003dd8:	f001 ff84 	bl	8005ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e082      	b.n	8003ee6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003de6:	f107 030c 	add.w	r3, r7, #12
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 ff9a 	bl	8004d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003df4:	f001 ff76 	bl	8005ce4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003df8:	f000 fd0c 	bl	8004814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dfc:	f001 ff42 	bl	8005c84 <vPortEnterCritical>
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e06:	b25b      	sxtb	r3, r3
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d103      	bne.n	8003e16 <xQueueSemaphoreTake+0x13a>
 8003e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d103      	bne.n	8003e2c <xQueueSemaphoreTake+0x150>
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e2c:	f001 ff5a 	bl	8005ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e30:	463a      	mov	r2, r7
 8003e32:	f107 030c 	add.w	r3, r7, #12
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 ff89 	bl	8004d50 <xTaskCheckForTimeOut>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d132      	bne.n	8003eaa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e46:	f000 f9f2 	bl	800422e <prvIsQueueEmpty>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d026      	beq.n	8003e9e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d109      	bne.n	8003e6c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003e58:	f001 ff14 	bl	8005c84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f001 f8d7 	bl	8005014 <xTaskPriorityInherit>
 8003e66:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003e68:	f001 ff3c 	bl	8005ce4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	3324      	adds	r3, #36	; 0x24
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fea1 	bl	8004bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e7c:	f000 f985 	bl	800418a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e80:	f000 fcd6 	bl	8004830 <xTaskResumeAll>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f47f af68 	bne.w	8003d5c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003e8c:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <xQueueSemaphoreTake+0x214>)
 8003e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	e75e      	b.n	8003d5c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003e9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ea0:	f000 f973 	bl	800418a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ea4:	f000 fcc4 	bl	8004830 <xTaskResumeAll>
 8003ea8:	e758      	b.n	8003d5c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003eaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eac:	f000 f96d 	bl	800418a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003eb0:	f000 fcbe 	bl	8004830 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eb6:	f000 f9ba 	bl	800422e <prvIsQueueEmpty>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f43f af4d 	beq.w	8003d5c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003ec8:	f001 fedc 	bl	8005c84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ece:	f000 f8b4 	bl	800403a <prvGetDisinheritPriorityAfterTimeout>
 8003ed2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 f970 	bl	80051c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003ee0:	f001 ff00 	bl	8005ce4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ee4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3738      	adds	r7, #56	; 0x38
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	e000ed04 	.word	0xe000ed04

08003ef4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08e      	sub	sp, #56	; 0x38
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	623b      	str	r3, [r7, #32]
}
 8003f1c:	bf00      	nop
 8003f1e:	e7fe      	b.n	8003f1e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d103      	bne.n	8003f2e <xQueueReceiveFromISR+0x3a>
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <xQueueReceiveFromISR+0x3e>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <xQueueReceiveFromISR+0x40>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	61fb      	str	r3, [r7, #28]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f4e:	f001 ff7b 	bl	8005e48 <vPortValidateInterruptPriority>
	__asm volatile
 8003f52:	f3ef 8211 	mrs	r2, BASEPRI
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	61ba      	str	r2, [r7, #24]
 8003f68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003f6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d02f      	beq.n	8003fda <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f88:	f000 f8d9 	bl	800413e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	1e5a      	subs	r2, r3, #1
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003f94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d112      	bne.n	8003fc4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d016      	beq.n	8003fd4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	3310      	adds	r3, #16
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fe56 	bl	8004c5c <xTaskRemoveFromEventList>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00e      	beq.n	8003fd4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00b      	beq.n	8003fd4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	e007      	b.n	8003fd4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fc8:	3301      	adds	r3, #1
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	b25a      	sxtb	r2, r3
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fd8:	e001      	b.n	8003fde <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f383 8811 	msr	BASEPRI, r3
}
 8003fe8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3738      	adds	r7, #56	; 0x38
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <vQueueDelete+0x28>
	__asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	60bb      	str	r3, [r7, #8]
}
 8004018:	bf00      	nop
 800401a:	e7fe      	b.n	800401a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 f95f 	bl	80042e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004028:	2b00      	cmp	r3, #0
 800402a:	d102      	bne.n	8004032 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f002 f817 	bl	8006060 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800403a:	b480      	push	{r7}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	2b00      	cmp	r3, #0
 8004048:	d006      	beq.n	8004058 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	e001      	b.n	800405c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800405c:	68fb      	ldr	r3, [r7, #12]
	}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10d      	bne.n	80040a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d14d      	bne.n	800412c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4618      	mov	r0, r3
 8004096:	f001 f825 	bl	80050e4 <xTaskPriorityDisinherit>
 800409a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	609a      	str	r2, [r3, #8]
 80040a2:	e043      	b.n	800412c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d119      	bne.n	80040de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6858      	ldr	r0, [r3, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	461a      	mov	r2, r3
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	f002 f915 	bl	80062e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	441a      	add	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d32b      	bcc.n	800412c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	e026      	b.n	800412c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	68d8      	ldr	r0, [r3, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	461a      	mov	r2, r3
 80040e8:	68b9      	ldr	r1, [r7, #8]
 80040ea:	f002 f8fb 	bl	80062e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	425b      	negs	r3, r3
 80040f8:	441a      	add	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d207      	bcs.n	800411a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	425b      	negs	r3, r3
 8004114:	441a      	add	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b02      	cmp	r3, #2
 800411e:	d105      	bne.n	800412c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	3b01      	subs	r3, #1
 800412a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004134:	697b      	ldr	r3, [r7, #20]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d018      	beq.n	8004182 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	441a      	add	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	d303      	bcc.n	8004172 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68d9      	ldr	r1, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	461a      	mov	r2, r3
 800417c:	6838      	ldr	r0, [r7, #0]
 800417e:	f002 f8b1 	bl	80062e4 <memcpy>
	}
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004192:	f001 fd77 	bl	8005c84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800419c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800419e:	e011      	b.n	80041c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d012      	beq.n	80041ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3324      	adds	r3, #36	; 0x24
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fd55 	bl	8004c5c <xTaskRemoveFromEventList>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041b8:	f000 fe2c 	bl	8004e14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	3b01      	subs	r3, #1
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	dce9      	bgt.n	80041a0 <prvUnlockQueue+0x16>
 80041cc:	e000      	b.n	80041d0 <prvUnlockQueue+0x46>
					break;
 80041ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	22ff      	movs	r2, #255	; 0xff
 80041d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80041d8:	f001 fd84 	bl	8005ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041dc:	f001 fd52 	bl	8005c84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041e8:	e011      	b.n	800420e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d012      	beq.n	8004218 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3310      	adds	r3, #16
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fd30 	bl	8004c5c <xTaskRemoveFromEventList>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004202:	f000 fe07 	bl	8004e14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004206:	7bbb      	ldrb	r3, [r7, #14]
 8004208:	3b01      	subs	r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800420e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004212:	2b00      	cmp	r3, #0
 8004214:	dce9      	bgt.n	80041ea <prvUnlockQueue+0x60>
 8004216:	e000      	b.n	800421a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004218:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	22ff      	movs	r2, #255	; 0xff
 800421e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004222:	f001 fd5f 	bl	8005ce4 <vPortExitCritical>
}
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004236:	f001 fd25 	bl	8005c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004242:	2301      	movs	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	e001      	b.n	800424c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800424c:	f001 fd4a 	bl	8005ce4 <vPortExitCritical>

	return xReturn;
 8004250:	68fb      	ldr	r3, [r7, #12]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004262:	f001 fd0f 	bl	8005c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	429a      	cmp	r2, r3
 8004270:	d102      	bne.n	8004278 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004272:	2301      	movs	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e001      	b.n	800427c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800427c:	f001 fd32 	bl	8005ce4 <vPortExitCritical>

	return xReturn;
 8004280:	68fb      	ldr	r3, [r7, #12]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	e014      	b.n	80042c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800429c:	4a0f      	ldr	r2, [pc, #60]	; (80042dc <vQueueAddToRegistry+0x50>)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042a8:	490c      	ldr	r1, [pc, #48]	; (80042dc <vQueueAddToRegistry+0x50>)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042b2:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <vQueueAddToRegistry+0x50>)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4413      	add	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042be:	e006      	b.n	80042ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3301      	adds	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b07      	cmp	r3, #7
 80042ca:	d9e7      	bls.n	800429c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	200007a0 	.word	0x200007a0

080042e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	e016      	b.n	800431c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80042ee:	4a10      	ldr	r2, [pc, #64]	; (8004330 <vQueueUnregisterQueue+0x50>)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d10b      	bne.n	8004316 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80042fe:	4a0c      	ldr	r2, [pc, #48]	; (8004330 <vQueueUnregisterQueue+0x50>)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2100      	movs	r1, #0
 8004304:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004308:	4a09      	ldr	r2, [pc, #36]	; (8004330 <vQueueUnregisterQueue+0x50>)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	2200      	movs	r2, #0
 8004312:	605a      	str	r2, [r3, #4]
				break;
 8004314:	e006      	b.n	8004324 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3301      	adds	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b07      	cmp	r3, #7
 8004320:	d9e5      	bls.n	80042ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	200007a0 	.word	0x200007a0

08004334 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004344:	f001 fc9e 	bl	8005c84 <vPortEnterCritical>
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800434e:	b25b      	sxtb	r3, r3
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d103      	bne.n	800435e <vQueueWaitForMessageRestricted+0x2a>
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004364:	b25b      	sxtb	r3, r3
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	d103      	bne.n	8004374 <vQueueWaitForMessageRestricted+0x40>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004374:	f001 fcb6 	bl	8005ce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	2b00      	cmp	r3, #0
 800437e:	d106      	bne.n	800438e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	3324      	adds	r3, #36	; 0x24
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fc3b 	bl	8004c04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800438e:	6978      	ldr	r0, [r7, #20]
 8004390:	f7ff fefb 	bl	800418a <prvUnlockQueue>
	}
 8004394:	bf00      	nop
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08e      	sub	sp, #56	; 0x38
 80043a0:	af04      	add	r7, sp, #16
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	623b      	str	r3, [r7, #32]
}
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	61fb      	str	r3, [r7, #28]
}
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043e2:	235c      	movs	r3, #92	; 0x5c
 80043e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b5c      	cmp	r3, #92	; 0x5c
 80043ea:	d00a      	beq.n	8004402 <xTaskCreateStatic+0x66>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	61bb      	str	r3, [r7, #24]
}
 80043fe:	bf00      	nop
 8004400:	e7fe      	b.n	8004400 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004402:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	2b00      	cmp	r3, #0
 8004408:	d01e      	beq.n	8004448 <xTaskCreateStatic+0xac>
 800440a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01b      	beq.n	8004448 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004418:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	2202      	movs	r2, #2
 800441e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004422:	2300      	movs	r3, #0
 8004424:	9303      	str	r3, [sp, #12]
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	9302      	str	r3, [sp, #8]
 800442a:	f107 0314 	add.w	r3, r7, #20
 800442e:	9301      	str	r3, [sp, #4]
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 f850 	bl	80044e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004442:	f000 f8dd 	bl	8004600 <prvAddNewTaskToReadyList>
 8004446:	e001      	b.n	800444c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800444c:	697b      	ldr	r3, [r7, #20]
	}
 800444e:	4618      	mov	r0, r3
 8004450:	3728      	adds	r7, #40	; 0x28
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004456:	b580      	push	{r7, lr}
 8004458:	b08c      	sub	sp, #48	; 0x30
 800445a:	af04      	add	r7, sp, #16
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	603b      	str	r3, [r7, #0]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f001 fd2c 	bl	8005ec8 <pvPortMalloc>
 8004470:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00e      	beq.n	8004496 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004478:	205c      	movs	r0, #92	; 0x5c
 800447a:	f001 fd25 	bl	8005ec8 <pvPortMalloc>
 800447e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
 800448c:	e005      	b.n	800449a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800448e:	6978      	ldr	r0, [r7, #20]
 8004490:	f001 fde6 	bl	8006060 <vPortFree>
 8004494:	e001      	b.n	800449a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d017      	beq.n	80044d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	2300      	movs	r3, #0
 80044ac:	9303      	str	r3, [sp, #12]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	9302      	str	r3, [sp, #8]
 80044b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f80e 	bl	80044e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044c4:	69f8      	ldr	r0, [r7, #28]
 80044c6:	f000 f89b 	bl	8004600 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044ca:	2301      	movs	r3, #1
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	e002      	b.n	80044d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295
 80044d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044d6:	69bb      	ldr	r3, [r7, #24]
	}
 80044d8:	4618      	mov	r0, r3
 80044da:	3720      	adds	r7, #32
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	461a      	mov	r2, r3
 80044f8:	21a5      	movs	r1, #165	; 0xa5
 80044fa:	f001 ff01 	bl	8006300 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004508:	3b01      	subs	r3, #1
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f023 0307 	bic.w	r3, r3, #7
 8004516:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	617b      	str	r3, [r7, #20]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01f      	beq.n	800457e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e012      	b.n	800456a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	7819      	ldrb	r1, [r3, #0]
 800454c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4413      	add	r3, r2
 8004552:	3334      	adds	r3, #52	; 0x34
 8004554:	460a      	mov	r2, r1
 8004556:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d006      	beq.n	8004572 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	3301      	adds	r3, #1
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2b0f      	cmp	r3, #15
 800456e:	d9e9      	bls.n	8004544 <prvInitialiseNewTask+0x64>
 8004570:	e000      	b.n	8004574 <prvInitialiseNewTask+0x94>
			{
				break;
 8004572:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800457c:	e003      	b.n	8004586 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	2b37      	cmp	r3, #55	; 0x37
 800458a:	d901      	bls.n	8004590 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800458c:	2337      	movs	r3, #55	; 0x37
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004594:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800459a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	2200      	movs	r2, #0
 80045a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	3304      	adds	r3, #4
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe fe56 	bl	8003258 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	3318      	adds	r3, #24
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fe fe51 	bl	8003258 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	2200      	movs	r2, #0
 80045d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	68f9      	ldr	r1, [r7, #12]
 80045de:	69b8      	ldr	r0, [r7, #24]
 80045e0:	f001 fa26 	bl	8005a30 <pxPortInitialiseStack>
 80045e4:	4602      	mov	r2, r0
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045f6:	bf00      	nop
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004608:	f001 fb3c 	bl	8005c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800460c:	4b2d      	ldr	r3, [pc, #180]	; (80046c4 <prvAddNewTaskToReadyList+0xc4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3301      	adds	r3, #1
 8004612:	4a2c      	ldr	r2, [pc, #176]	; (80046c4 <prvAddNewTaskToReadyList+0xc4>)
 8004614:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004616:	4b2c      	ldr	r3, [pc, #176]	; (80046c8 <prvAddNewTaskToReadyList+0xc8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800461e:	4a2a      	ldr	r2, [pc, #168]	; (80046c8 <prvAddNewTaskToReadyList+0xc8>)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004624:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <prvAddNewTaskToReadyList+0xc4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d110      	bne.n	800464e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800462c:	f000 fc16 	bl	8004e5c <prvInitialiseTaskLists>
 8004630:	e00d      	b.n	800464e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004632:	4b26      	ldr	r3, [pc, #152]	; (80046cc <prvAddNewTaskToReadyList+0xcc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800463a:	4b23      	ldr	r3, [pc, #140]	; (80046c8 <prvAddNewTaskToReadyList+0xc8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	429a      	cmp	r2, r3
 8004646:	d802      	bhi.n	800464e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004648:	4a1f      	ldr	r2, [pc, #124]	; (80046c8 <prvAddNewTaskToReadyList+0xc8>)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800464e:	4b20      	ldr	r3, [pc, #128]	; (80046d0 <prvAddNewTaskToReadyList+0xd0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3301      	adds	r3, #1
 8004654:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <prvAddNewTaskToReadyList+0xd0>)
 8004656:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004658:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <prvAddNewTaskToReadyList+0xd0>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <prvAddNewTaskToReadyList+0xd4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d903      	bls.n	8004674 <prvAddNewTaskToReadyList+0x74>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <prvAddNewTaskToReadyList+0xd4>)
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <prvAddNewTaskToReadyList+0xd8>)
 8004682:	441a      	add	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f7fe fdf1 	bl	8003272 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004690:	f001 fb28 	bl	8005ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004694:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <prvAddNewTaskToReadyList+0xcc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00e      	beq.n	80046ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <prvAddNewTaskToReadyList+0xc8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d207      	bcs.n	80046ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046aa:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <prvAddNewTaskToReadyList+0xdc>)
 80046ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000cb4 	.word	0x20000cb4
 80046c8:	200007e0 	.word	0x200007e0
 80046cc:	20000cc0 	.word	0x20000cc0
 80046d0:	20000cd0 	.word	0x20000cd0
 80046d4:	20000cbc 	.word	0x20000cbc
 80046d8:	200007e4 	.word	0x200007e4
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d017      	beq.n	8004722 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046f2:	4b13      	ldr	r3, [pc, #76]	; (8004740 <vTaskDelay+0x60>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <vTaskDelay+0x30>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	60bb      	str	r3, [r7, #8]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004710:	f000 f880 	bl	8004814 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004714:	2100      	movs	r1, #0
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fde8 	bl	80052ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800471c:	f000 f888 	bl	8004830 <xTaskResumeAll>
 8004720:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d107      	bne.n	8004738 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <vTaskDelay+0x64>)
 800472a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004738:	bf00      	nop
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	20000cdc 	.word	0x20000cdc
 8004744:	e000ed04 	.word	0xe000ed04

08004748 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004752:	2300      	movs	r3, #0
 8004754:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004756:	463a      	mov	r2, r7
 8004758:	1d39      	adds	r1, r7, #4
 800475a:	f107 0308 	add.w	r3, r7, #8
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fd26 	bl	80031b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	9202      	str	r2, [sp, #8]
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	2300      	movs	r3, #0
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	460a      	mov	r2, r1
 8004776:	4921      	ldr	r1, [pc, #132]	; (80047fc <vTaskStartScheduler+0xb4>)
 8004778:	4821      	ldr	r0, [pc, #132]	; (8004800 <vTaskStartScheduler+0xb8>)
 800477a:	f7ff fe0f 	bl	800439c <xTaskCreateStatic>
 800477e:	4603      	mov	r3, r0
 8004780:	4a20      	ldr	r2, [pc, #128]	; (8004804 <vTaskStartScheduler+0xbc>)
 8004782:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004784:	4b1f      	ldr	r3, [pc, #124]	; (8004804 <vTaskStartScheduler+0xbc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800478c:	2301      	movs	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e001      	b.n	8004796 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d102      	bne.n	80047a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800479c:	f000 fdfa 	bl	8005394 <xTimerCreateTimerTask>
 80047a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d116      	bne.n	80047d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	613b      	str	r3, [r7, #16]
}
 80047ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047bc:	4b12      	ldr	r3, [pc, #72]	; (8004808 <vTaskStartScheduler+0xc0>)
 80047be:	f04f 32ff 	mov.w	r2, #4294967295
 80047c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <vTaskStartScheduler+0xc4>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047ca:	4b11      	ldr	r3, [pc, #68]	; (8004810 <vTaskStartScheduler+0xc8>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047d0:	f001 f9b6 	bl	8005b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047d4:	e00e      	b.n	80047f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d10a      	bne.n	80047f4 <vTaskStartScheduler+0xac>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	60fb      	str	r3, [r7, #12]
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <vTaskStartScheduler+0xaa>
}
 80047f4:	bf00      	nop
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	08006374 	.word	0x08006374
 8004800:	08004e2d 	.word	0x08004e2d
 8004804:	20000cd8 	.word	0x20000cd8
 8004808:	20000cd4 	.word	0x20000cd4
 800480c:	20000cc0 	.word	0x20000cc0
 8004810:	20000cb8 	.word	0x20000cb8

08004814 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <vTaskSuspendAll+0x18>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	4a03      	ldr	r2, [pc, #12]	; (800482c <vTaskSuspendAll+0x18>)
 8004820:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004822:	bf00      	nop
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	20000cdc 	.word	0x20000cdc

08004830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800483e:	4b42      	ldr	r3, [pc, #264]	; (8004948 <xTaskResumeAll+0x118>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <xTaskResumeAll+0x2c>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	603b      	str	r3, [r7, #0]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800485c:	f001 fa12 	bl	8005c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004860:	4b39      	ldr	r3, [pc, #228]	; (8004948 <xTaskResumeAll+0x118>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3b01      	subs	r3, #1
 8004866:	4a38      	ldr	r2, [pc, #224]	; (8004948 <xTaskResumeAll+0x118>)
 8004868:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800486a:	4b37      	ldr	r3, [pc, #220]	; (8004948 <xTaskResumeAll+0x118>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d162      	bne.n	8004938 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004872:	4b36      	ldr	r3, [pc, #216]	; (800494c <xTaskResumeAll+0x11c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d05e      	beq.n	8004938 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800487a:	e02f      	b.n	80048dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487c:	4b34      	ldr	r3, [pc, #208]	; (8004950 <xTaskResumeAll+0x120>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3318      	adds	r3, #24
 8004888:	4618      	mov	r0, r3
 800488a:	f7fe fd4f 	bl	800332c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3304      	adds	r3, #4
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fd4a 	bl	800332c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489c:	4b2d      	ldr	r3, [pc, #180]	; (8004954 <xTaskResumeAll+0x124>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d903      	bls.n	80048ac <xTaskResumeAll+0x7c>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4a2a      	ldr	r2, [pc, #168]	; (8004954 <xTaskResumeAll+0x124>)
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4a27      	ldr	r2, [pc, #156]	; (8004958 <xTaskResumeAll+0x128>)
 80048ba:	441a      	add	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f7fe fcd5 	bl	8003272 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048cc:	4b23      	ldr	r3, [pc, #140]	; (800495c <xTaskResumeAll+0x12c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d302      	bcc.n	80048dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80048d6:	4b22      	ldr	r3, [pc, #136]	; (8004960 <xTaskResumeAll+0x130>)
 80048d8:	2201      	movs	r2, #1
 80048da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048dc:	4b1c      	ldr	r3, [pc, #112]	; (8004950 <xTaskResumeAll+0x120>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1cb      	bne.n	800487c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048ea:	f000 fb55 	bl	8004f98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048ee:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <xTaskResumeAll+0x134>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d010      	beq.n	800491c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048fa:	f000 f847 	bl	800498c <xTaskIncrementTick>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004904:	4b16      	ldr	r3, [pc, #88]	; (8004960 <xTaskResumeAll+0x130>)
 8004906:	2201      	movs	r2, #1
 8004908:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3b01      	subs	r3, #1
 800490e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f1      	bne.n	80048fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004916:	4b13      	ldr	r3, [pc, #76]	; (8004964 <xTaskResumeAll+0x134>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800491c:	4b10      	ldr	r3, [pc, #64]	; (8004960 <xTaskResumeAll+0x130>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d009      	beq.n	8004938 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004924:	2301      	movs	r3, #1
 8004926:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004928:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <xTaskResumeAll+0x138>)
 800492a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004938:	f001 f9d4 	bl	8005ce4 <vPortExitCritical>

	return xAlreadyYielded;
 800493c:	68bb      	ldr	r3, [r7, #8]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000cdc 	.word	0x20000cdc
 800494c:	20000cb4 	.word	0x20000cb4
 8004950:	20000c74 	.word	0x20000c74
 8004954:	20000cbc 	.word	0x20000cbc
 8004958:	200007e4 	.word	0x200007e4
 800495c:	200007e0 	.word	0x200007e0
 8004960:	20000cc8 	.word	0x20000cc8
 8004964:	20000cc4 	.word	0x20000cc4
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <xTaskGetTickCount+0x1c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004978:	687b      	ldr	r3, [r7, #4]
}
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000cb8 	.word	0x20000cb8

0800498c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004996:	4b4f      	ldr	r3, [pc, #316]	; (8004ad4 <xTaskIncrementTick+0x148>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f040 808f 	bne.w	8004abe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049a0:	4b4d      	ldr	r3, [pc, #308]	; (8004ad8 <xTaskIncrementTick+0x14c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3301      	adds	r3, #1
 80049a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049a8:	4a4b      	ldr	r2, [pc, #300]	; (8004ad8 <xTaskIncrementTick+0x14c>)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d120      	bne.n	80049f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049b4:	4b49      	ldr	r3, [pc, #292]	; (8004adc <xTaskIncrementTick+0x150>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	603b      	str	r3, [r7, #0]
}
 80049d0:	bf00      	nop
 80049d2:	e7fe      	b.n	80049d2 <xTaskIncrementTick+0x46>
 80049d4:	4b41      	ldr	r3, [pc, #260]	; (8004adc <xTaskIncrementTick+0x150>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	4b41      	ldr	r3, [pc, #260]	; (8004ae0 <xTaskIncrementTick+0x154>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a3f      	ldr	r2, [pc, #252]	; (8004adc <xTaskIncrementTick+0x150>)
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	4a3f      	ldr	r2, [pc, #252]	; (8004ae0 <xTaskIncrementTick+0x154>)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	4b3e      	ldr	r3, [pc, #248]	; (8004ae4 <xTaskIncrementTick+0x158>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3301      	adds	r3, #1
 80049ee:	4a3d      	ldr	r2, [pc, #244]	; (8004ae4 <xTaskIncrementTick+0x158>)
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	f000 fad1 	bl	8004f98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049f6:	4b3c      	ldr	r3, [pc, #240]	; (8004ae8 <xTaskIncrementTick+0x15c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d349      	bcc.n	8004a94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a00:	4b36      	ldr	r3, [pc, #216]	; (8004adc <xTaskIncrementTick+0x150>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a0a:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <xTaskIncrementTick+0x15c>)
 8004a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a10:	601a      	str	r2, [r3, #0]
					break;
 8004a12:	e03f      	b.n	8004a94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a14:	4b31      	ldr	r3, [pc, #196]	; (8004adc <xTaskIncrementTick+0x150>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d203      	bcs.n	8004a34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a2c:	4a2e      	ldr	r2, [pc, #184]	; (8004ae8 <xTaskIncrementTick+0x15c>)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a32:	e02f      	b.n	8004a94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe fc77 	bl	800332c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d004      	beq.n	8004a50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3318      	adds	r3, #24
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fc6e 	bl	800332c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a54:	4b25      	ldr	r3, [pc, #148]	; (8004aec <xTaskIncrementTick+0x160>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d903      	bls.n	8004a64 <xTaskIncrementTick+0xd8>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	4a22      	ldr	r2, [pc, #136]	; (8004aec <xTaskIncrementTick+0x160>)
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4a1f      	ldr	r2, [pc, #124]	; (8004af0 <xTaskIncrementTick+0x164>)
 8004a72:	441a      	add	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f7fe fbf9 	bl	8003272 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a84:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <xTaskIncrementTick+0x168>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d3b8      	bcc.n	8004a00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a92:	e7b5      	b.n	8004a00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a94:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <xTaskIncrementTick+0x168>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9a:	4915      	ldr	r1, [pc, #84]	; (8004af0 <xTaskIncrementTick+0x164>)
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d901      	bls.n	8004ab0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004aac:	2301      	movs	r3, #1
 8004aae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <xTaskIncrementTick+0x16c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	e004      	b.n	8004ac8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004abe:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <xTaskIncrementTick+0x170>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	4a0d      	ldr	r2, [pc, #52]	; (8004afc <xTaskIncrementTick+0x170>)
 8004ac6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ac8:	697b      	ldr	r3, [r7, #20]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000cdc 	.word	0x20000cdc
 8004ad8:	20000cb8 	.word	0x20000cb8
 8004adc:	20000c6c 	.word	0x20000c6c
 8004ae0:	20000c70 	.word	0x20000c70
 8004ae4:	20000ccc 	.word	0x20000ccc
 8004ae8:	20000cd4 	.word	0x20000cd4
 8004aec:	20000cbc 	.word	0x20000cbc
 8004af0:	200007e4 	.word	0x200007e4
 8004af4:	200007e0 	.word	0x200007e0
 8004af8:	20000cc8 	.word	0x20000cc8
 8004afc:	20000cc4 	.word	0x20000cc4

08004b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b06:	4b28      	ldr	r3, [pc, #160]	; (8004ba8 <vTaskSwitchContext+0xa8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b0e:	4b27      	ldr	r3, [pc, #156]	; (8004bac <vTaskSwitchContext+0xac>)
 8004b10:	2201      	movs	r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b14:	e041      	b.n	8004b9a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004b16:	4b25      	ldr	r3, [pc, #148]	; (8004bac <vTaskSwitchContext+0xac>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1c:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <vTaskSwitchContext+0xb0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	e010      	b.n	8004b46 <vTaskSwitchContext+0x46>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <vTaskSwitchContext+0x40>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	607b      	str	r3, [r7, #4]
}
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <vTaskSwitchContext+0x3e>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	491b      	ldr	r1, [pc, #108]	; (8004bb4 <vTaskSwitchContext+0xb4>)
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0e4      	beq.n	8004b24 <vTaskSwitchContext+0x24>
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4a13      	ldr	r2, [pc, #76]	; (8004bb4 <vTaskSwitchContext+0xb4>)
 8004b66:	4413      	add	r3, r2
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	605a      	str	r2, [r3, #4]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d104      	bne.n	8004b8a <vTaskSwitchContext+0x8a>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <vTaskSwitchContext+0xb8>)
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4a06      	ldr	r2, [pc, #24]	; (8004bb0 <vTaskSwitchContext+0xb0>)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6013      	str	r3, [r2, #0]
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000cdc 	.word	0x20000cdc
 8004bac:	20000cc8 	.word	0x20000cc8
 8004bb0:	20000cbc 	.word	0x20000cbc
 8004bb4:	200007e4 	.word	0x200007e4
 8004bb8:	200007e0 	.word	0x200007e0

08004bbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	60fb      	str	r3, [r7, #12]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <vTaskPlaceOnEventList+0x44>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3318      	adds	r3, #24
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fe fb65 	bl	80032ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	6838      	ldr	r0, [r7, #0]
 8004bf4:	f000 fb7a 	bl	80052ec <prvAddCurrentTaskToDelayedList>
}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	200007e0 	.word	0x200007e0

08004c04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	617b      	str	r3, [r7, #20]
}
 8004c28:	bf00      	nop
 8004c2a:	e7fe      	b.n	8004c2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3318      	adds	r3, #24
 8004c32:	4619      	mov	r1, r3
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7fe fb1c 	bl	8003272 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004c40:	f04f 33ff 	mov.w	r3, #4294967295
 8004c44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	68b8      	ldr	r0, [r7, #8]
 8004c4a:	f000 fb4f 	bl	80052ec <prvAddCurrentTaskToDelayedList>
	}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	200007e0 	.word	0x200007e0

08004c5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	60fb      	str	r3, [r7, #12]
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	3318      	adds	r3, #24
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fe fb4d 	bl	800332c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c92:	4b1e      	ldr	r3, [pc, #120]	; (8004d0c <xTaskRemoveFromEventList+0xb0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d11d      	bne.n	8004cd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fb44 	bl	800332c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <xTaskRemoveFromEventList+0xb4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d903      	bls.n	8004cb8 <xTaskRemoveFromEventList+0x5c>
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	4a16      	ldr	r2, [pc, #88]	; (8004d10 <xTaskRemoveFromEventList+0xb4>)
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <xTaskRemoveFromEventList+0xb8>)
 8004cc6:	441a      	add	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7fe facf 	bl	8003272 <vListInsertEnd>
 8004cd4:	e005      	b.n	8004ce2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	3318      	adds	r3, #24
 8004cda:	4619      	mov	r1, r3
 8004cdc:	480e      	ldr	r0, [pc, #56]	; (8004d18 <xTaskRemoveFromEventList+0xbc>)
 8004cde:	f7fe fac8 	bl	8003272 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <xTaskRemoveFromEventList+0xc0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d905      	bls.n	8004cfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <xTaskRemoveFromEventList+0xc4>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e001      	b.n	8004d00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d00:	697b      	ldr	r3, [r7, #20]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000cdc 	.word	0x20000cdc
 8004d10:	20000cbc 	.word	0x20000cbc
 8004d14:	200007e4 	.word	0x200007e4
 8004d18:	20000c74 	.word	0x20000c74
 8004d1c:	200007e0 	.word	0x200007e0
 8004d20:	20000cc8 	.word	0x20000cc8

08004d24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <vTaskInternalSetTimeOutState+0x24>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <vTaskInternalSetTimeOutState+0x28>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	605a      	str	r2, [r3, #4]
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	20000ccc 	.word	0x20000ccc
 8004d4c:	20000cb8 	.word	0x20000cb8

08004d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	613b      	str	r3, [r7, #16]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	60fb      	str	r3, [r7, #12]
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004d92:	f000 ff77 	bl	8005c84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d96:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <xTaskCheckForTimeOut+0xbc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d102      	bne.n	8004db6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	e023      	b.n	8004dfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <xTaskCheckForTimeOut+0xc0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d007      	beq.n	8004dd2 <xTaskCheckForTimeOut+0x82>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d302      	bcc.n	8004dd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	61fb      	str	r3, [r7, #28]
 8004dd0:	e015      	b.n	8004dfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d20b      	bcs.n	8004df4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff ff9b 	bl	8004d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	e004      	b.n	8004dfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004dfe:	f000 ff71 	bl	8005ce4 <vPortExitCritical>

	return xReturn;
 8004e02:	69fb      	ldr	r3, [r7, #28]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	20000cb8 	.word	0x20000cb8
 8004e10:	20000ccc 	.word	0x20000ccc

08004e14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e18:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <vTaskMissedYield+0x14>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	20000cc8 	.word	0x20000cc8

08004e2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e34:	f000 f852 	bl	8004edc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <prvIdleTask+0x28>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d9f9      	bls.n	8004e34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <prvIdleTask+0x2c>)
 8004e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e50:	e7f0      	b.n	8004e34 <prvIdleTask+0x8>
 8004e52:	bf00      	nop
 8004e54:	200007e4 	.word	0x200007e4
 8004e58:	e000ed04 	.word	0xe000ed04

08004e5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e62:	2300      	movs	r3, #0
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	e00c      	b.n	8004e82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4a12      	ldr	r2, [pc, #72]	; (8004ebc <prvInitialiseTaskLists+0x60>)
 8004e74:	4413      	add	r3, r2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe f9ce 	bl	8003218 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b37      	cmp	r3, #55	; 0x37
 8004e86:	d9ef      	bls.n	8004e68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e88:	480d      	ldr	r0, [pc, #52]	; (8004ec0 <prvInitialiseTaskLists+0x64>)
 8004e8a:	f7fe f9c5 	bl	8003218 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e8e:	480d      	ldr	r0, [pc, #52]	; (8004ec4 <prvInitialiseTaskLists+0x68>)
 8004e90:	f7fe f9c2 	bl	8003218 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e94:	480c      	ldr	r0, [pc, #48]	; (8004ec8 <prvInitialiseTaskLists+0x6c>)
 8004e96:	f7fe f9bf 	bl	8003218 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e9a:	480c      	ldr	r0, [pc, #48]	; (8004ecc <prvInitialiseTaskLists+0x70>)
 8004e9c:	f7fe f9bc 	bl	8003218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ea0:	480b      	ldr	r0, [pc, #44]	; (8004ed0 <prvInitialiseTaskLists+0x74>)
 8004ea2:	f7fe f9b9 	bl	8003218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <prvInitialiseTaskLists+0x78>)
 8004ea8:	4a05      	ldr	r2, [pc, #20]	; (8004ec0 <prvInitialiseTaskLists+0x64>)
 8004eaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <prvInitialiseTaskLists+0x7c>)
 8004eae:	4a05      	ldr	r2, [pc, #20]	; (8004ec4 <prvInitialiseTaskLists+0x68>)
 8004eb0:	601a      	str	r2, [r3, #0]
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	200007e4 	.word	0x200007e4
 8004ec0:	20000c44 	.word	0x20000c44
 8004ec4:	20000c58 	.word	0x20000c58
 8004ec8:	20000c74 	.word	0x20000c74
 8004ecc:	20000c88 	.word	0x20000c88
 8004ed0:	20000ca0 	.word	0x20000ca0
 8004ed4:	20000c6c 	.word	0x20000c6c
 8004ed8:	20000c70 	.word	0x20000c70

08004edc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ee2:	e019      	b.n	8004f18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ee4:	f000 fece 	bl	8005c84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee8:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <prvCheckTasksWaitingTermination+0x50>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fe fa19 	bl	800332c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <prvCheckTasksWaitingTermination+0x54>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <prvCheckTasksWaitingTermination+0x54>)
 8004f02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <prvCheckTasksWaitingTermination+0x58>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <prvCheckTasksWaitingTermination+0x58>)
 8004f0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f0e:	f000 fee9 	bl	8005ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f810 	bl	8004f38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f18:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <prvCheckTasksWaitingTermination+0x58>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e1      	bne.n	8004ee4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000c88 	.word	0x20000c88
 8004f30:	20000cb4 	.word	0x20000cb4
 8004f34:	20000c9c 	.word	0x20000c9c

08004f38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d108      	bne.n	8004f5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f001 f886 	bl	8006060 <vPortFree>
				vPortFree( pxTCB );
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f001 f883 	bl	8006060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f5a:	e018      	b.n	8004f8e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d103      	bne.n	8004f6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f001 f87a 	bl	8006060 <vPortFree>
	}
 8004f6c:	e00f      	b.n	8004f8e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d00a      	beq.n	8004f8e <prvDeleteTCB+0x56>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	60fb      	str	r3, [r7, #12]
}
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <prvDeleteTCB+0x54>
	}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <prvResetNextTaskUnblockTime+0x38>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d104      	bne.n	8004fb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8004faa:	f04f 32ff 	mov.w	r2, #4294967295
 8004fae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fb0:	e008      	b.n	8004fc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb2:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <prvResetNextTaskUnblockTime+0x38>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4a04      	ldr	r2, [pc, #16]	; (8004fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8004fc2:	6013      	str	r3, [r2, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	20000c6c 	.word	0x20000c6c
 8004fd4:	20000cd4 	.word	0x20000cd4

08004fd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fde:	4b0b      	ldr	r3, [pc, #44]	; (800500c <xTaskGetSchedulerState+0x34>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	e008      	b.n	8004ffe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fec:	4b08      	ldr	r3, [pc, #32]	; (8005010 <xTaskGetSchedulerState+0x38>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	607b      	str	r3, [r7, #4]
 8004ff8:	e001      	b.n	8004ffe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ffe:	687b      	ldr	r3, [r7, #4]
	}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	20000cc0 	.word	0x20000cc0
 8005010:	20000cdc 	.word	0x20000cdc

08005014 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d051      	beq.n	80050ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502e:	4b2a      	ldr	r3, [pc, #168]	; (80050d8 <xTaskPriorityInherit+0xc4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	429a      	cmp	r2, r3
 8005036:	d241      	bcs.n	80050bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	db06      	blt.n	800504e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005040:	4b25      	ldr	r3, [pc, #148]	; (80050d8 <xTaskPriorityInherit+0xc4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	6959      	ldr	r1, [r3, #20]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4a1f      	ldr	r2, [pc, #124]	; (80050dc <xTaskPriorityInherit+0xc8>)
 8005060:	4413      	add	r3, r2
 8005062:	4299      	cmp	r1, r3
 8005064:	d122      	bne.n	80050ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	3304      	adds	r3, #4
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe f95e 	bl	800332c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005070:	4b19      	ldr	r3, [pc, #100]	; (80050d8 <xTaskPriorityInherit+0xc4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507e:	4b18      	ldr	r3, [pc, #96]	; (80050e0 <xTaskPriorityInherit+0xcc>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d903      	bls.n	800508e <xTaskPriorityInherit+0x7a>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <xTaskPriorityInherit+0xcc>)
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4a10      	ldr	r2, [pc, #64]	; (80050dc <xTaskPriorityInherit+0xc8>)
 800509c:	441a      	add	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f7fe f8e4 	bl	8003272 <vListInsertEnd>
 80050aa:	e004      	b.n	80050b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <xTaskPriorityInherit+0xc4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80050b6:	2301      	movs	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	e008      	b.n	80050ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <xTaskPriorityInherit+0xc4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d201      	bcs.n	80050ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80050ca:	2301      	movs	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050ce:	68fb      	ldr	r3, [r7, #12]
	}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	200007e0 	.word	0x200007e0
 80050dc:	200007e4 	.word	0x200007e4
 80050e0:	20000cbc 	.word	0x20000cbc

080050e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d056      	beq.n	80051a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050fa:	4b2e      	ldr	r3, [pc, #184]	; (80051b4 <xTaskPriorityDisinherit+0xd0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	429a      	cmp	r2, r3
 8005102:	d00a      	beq.n	800511a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	60fb      	str	r3, [r7, #12]
}
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	60bb      	str	r3, [r7, #8]
}
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513c:	1e5a      	subs	r2, r3, #1
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514a:	429a      	cmp	r2, r3
 800514c:	d02c      	beq.n	80051a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005152:	2b00      	cmp	r3, #0
 8005154:	d128      	bne.n	80051a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	3304      	adds	r3, #4
 800515a:	4618      	mov	r0, r3
 800515c:	f7fe f8e6 	bl	800332c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005178:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <xTaskPriorityDisinherit+0xd4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d903      	bls.n	8005188 <xTaskPriorityDisinherit+0xa4>
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	4a0c      	ldr	r2, [pc, #48]	; (80051b8 <xTaskPriorityDisinherit+0xd4>)
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4a09      	ldr	r2, [pc, #36]	; (80051bc <xTaskPriorityDisinherit+0xd8>)
 8005196:	441a      	add	r2, r3
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	3304      	adds	r3, #4
 800519c:	4619      	mov	r1, r3
 800519e:	4610      	mov	r0, r2
 80051a0:	f7fe f867 	bl	8003272 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051a8:	697b      	ldr	r3, [r7, #20]
	}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200007e0 	.word	0x200007e0
 80051b8:	20000cbc 	.word	0x20000cbc
 80051bc:	200007e4 	.word	0x200007e4

080051c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80051ce:	2301      	movs	r3, #1
 80051d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d06a      	beq.n	80052ae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	60fb      	str	r3, [r7, #12]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d902      	bls.n	8005206 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	e002      	b.n	800520c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	429a      	cmp	r2, r3
 8005214:	d04b      	beq.n	80052ae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	429a      	cmp	r2, r3
 800521e:	d146      	bne.n	80052ae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005220:	4b25      	ldr	r3, [pc, #148]	; (80052b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	429a      	cmp	r2, r3
 8005228:	d10a      	bne.n	8005240 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	60bb      	str	r3, [r7, #8]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	db04      	blt.n	800525e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	6959      	ldr	r1, [r3, #20]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4a13      	ldr	r2, [pc, #76]	; (80052bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800526e:	4413      	add	r3, r2
 8005270:	4299      	cmp	r1, r3
 8005272:	d11c      	bne.n	80052ae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	3304      	adds	r3, #4
 8005278:	4618      	mov	r0, r3
 800527a:	f7fe f857 	bl	800332c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005282:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d903      	bls.n	8005292 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	4a0c      	ldr	r2, [pc, #48]	; (80052c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005296:	4613      	mov	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4a07      	ldr	r2, [pc, #28]	; (80052bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80052a0:	441a      	add	r2, r3
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	3304      	adds	r3, #4
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f7fd ffe2 	bl	8003272 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052ae:	bf00      	nop
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	200007e0 	.word	0x200007e0
 80052bc:	200007e4 	.word	0x200007e4
 80052c0:	20000cbc 	.word	0x20000cbc

080052c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80052c8:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052d6:	3201      	adds	r2, #1
 80052d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80052da:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80052dc:	681b      	ldr	r3, [r3, #0]
	}
 80052de:	4618      	mov	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	200007e0 	.word	0x200007e0

080052ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052f6:	4b21      	ldr	r3, [pc, #132]	; (800537c <prvAddCurrentTaskToDelayedList+0x90>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052fc:	4b20      	ldr	r3, [pc, #128]	; (8005380 <prvAddCurrentTaskToDelayedList+0x94>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3304      	adds	r3, #4
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe f812 	bl	800332c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d10a      	bne.n	8005326 <prvAddCurrentTaskToDelayedList+0x3a>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005316:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <prvAddCurrentTaskToDelayedList+0x94>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3304      	adds	r3, #4
 800531c:	4619      	mov	r1, r3
 800531e:	4819      	ldr	r0, [pc, #100]	; (8005384 <prvAddCurrentTaskToDelayedList+0x98>)
 8005320:	f7fd ffa7 	bl	8003272 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005324:	e026      	b.n	8005374 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4413      	add	r3, r2
 800532c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800532e:	4b14      	ldr	r3, [pc, #80]	; (8005380 <prvAddCurrentTaskToDelayedList+0x94>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	429a      	cmp	r2, r3
 800533c:	d209      	bcs.n	8005352 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800533e:	4b12      	ldr	r3, [pc, #72]	; (8005388 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <prvAddCurrentTaskToDelayedList+0x94>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3304      	adds	r3, #4
 8005348:	4619      	mov	r1, r3
 800534a:	4610      	mov	r0, r2
 800534c:	f7fd ffb5 	bl	80032ba <vListInsert>
}
 8005350:	e010      	b.n	8005374 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005352:	4b0e      	ldr	r3, [pc, #56]	; (800538c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <prvAddCurrentTaskToDelayedList+0x94>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f7fd ffab 	bl	80032ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005364:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	429a      	cmp	r2, r3
 800536c:	d202      	bcs.n	8005374 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800536e:	4a08      	ldr	r2, [pc, #32]	; (8005390 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	6013      	str	r3, [r2, #0]
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	20000cb8 	.word	0x20000cb8
 8005380:	200007e0 	.word	0x200007e0
 8005384:	20000ca0 	.word	0x20000ca0
 8005388:	20000c70 	.word	0x20000c70
 800538c:	20000c6c 	.word	0x20000c6c
 8005390:	20000cd4 	.word	0x20000cd4

08005394 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800539e:	f000 fb07 	bl	80059b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053a2:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <xTimerCreateTimerTask+0x80>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d021      	beq.n	80053ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053b2:	1d3a      	adds	r2, r7, #4
 80053b4:	f107 0108 	add.w	r1, r7, #8
 80053b8:	f107 030c 	add.w	r3, r7, #12
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fd ff11 	bl	80031e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	9202      	str	r2, [sp, #8]
 80053ca:	9301      	str	r3, [sp, #4]
 80053cc:	2302      	movs	r3, #2
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	2300      	movs	r3, #0
 80053d2:	460a      	mov	r2, r1
 80053d4:	4910      	ldr	r1, [pc, #64]	; (8005418 <xTimerCreateTimerTask+0x84>)
 80053d6:	4811      	ldr	r0, [pc, #68]	; (800541c <xTimerCreateTimerTask+0x88>)
 80053d8:	f7fe ffe0 	bl	800439c <xTaskCreateStatic>
 80053dc:	4603      	mov	r3, r0
 80053de:	4a10      	ldr	r2, [pc, #64]	; (8005420 <xTimerCreateTimerTask+0x8c>)
 80053e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053e2:	4b0f      	ldr	r3, [pc, #60]	; (8005420 <xTimerCreateTimerTask+0x8c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053ea:	2301      	movs	r3, #1
 80053ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	613b      	str	r3, [r7, #16]
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800540a:	697b      	ldr	r3, [r7, #20]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000d10 	.word	0x20000d10
 8005418:	0800637c 	.word	0x0800637c
 800541c:	08005559 	.word	0x08005559
 8005420:	20000d14 	.word	0x20000d14

08005424 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	; 0x28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005432:	2300      	movs	r3, #0
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <xTimerGenericCommand+0x2e>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	623b      	str	r3, [r7, #32]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005452:	4b1a      	ldr	r3, [pc, #104]	; (80054bc <xTimerGenericCommand+0x98>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d02a      	beq.n	80054b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b05      	cmp	r3, #5
 800546a:	dc18      	bgt.n	800549e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800546c:	f7ff fdb4 	bl	8004fd8 <xTaskGetSchedulerState>
 8005470:	4603      	mov	r3, r0
 8005472:	2b02      	cmp	r3, #2
 8005474:	d109      	bne.n	800548a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005476:	4b11      	ldr	r3, [pc, #68]	; (80054bc <xTimerGenericCommand+0x98>)
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	f107 0110 	add.w	r1, r7, #16
 800547e:	2300      	movs	r3, #0
 8005480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005482:	f7fe f925 	bl	80036d0 <xQueueGenericSend>
 8005486:	6278      	str	r0, [r7, #36]	; 0x24
 8005488:	e012      	b.n	80054b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800548a:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <xTimerGenericCommand+0x98>)
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	f107 0110 	add.w	r1, r7, #16
 8005492:	2300      	movs	r3, #0
 8005494:	2200      	movs	r2, #0
 8005496:	f7fe f91b 	bl	80036d0 <xQueueGenericSend>
 800549a:	6278      	str	r0, [r7, #36]	; 0x24
 800549c:	e008      	b.n	80054b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800549e:	4b07      	ldr	r3, [pc, #28]	; (80054bc <xTimerGenericCommand+0x98>)
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	f107 0110 	add.w	r1, r7, #16
 80054a6:	2300      	movs	r3, #0
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	f7fe fa0f 	bl	80038cc <xQueueGenericSendFromISR>
 80054ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3728      	adds	r7, #40	; 0x28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000d10 	.word	0x20000d10

080054c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ca:	4b22      	ldr	r3, [pc, #136]	; (8005554 <prvProcessExpiredTimer+0x94>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fd ff27 	bl	800332c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d022      	beq.n	8005532 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	699a      	ldr	r2, [r3, #24]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	18d1      	adds	r1, r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	6978      	ldr	r0, [r7, #20]
 80054fa:	f000 f8d1 	bl	80056a0 <prvInsertTimerInActiveList>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01f      	beq.n	8005544 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005504:	2300      	movs	r3, #0
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	2300      	movs	r3, #0
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	2100      	movs	r1, #0
 800550e:	6978      	ldr	r0, [r7, #20]
 8005510:	f7ff ff88 	bl	8005424 <xTimerGenericCommand>
 8005514:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d113      	bne.n	8005544 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	60fb      	str	r3, [r7, #12]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	b2da      	uxtb	r2, r3
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	6978      	ldr	r0, [r7, #20]
 800554a:	4798      	blx	r3
}
 800554c:	bf00      	nop
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20000d08 	.word	0x20000d08

08005558 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005560:	f107 0308 	add.w	r3, r7, #8
 8005564:	4618      	mov	r0, r3
 8005566:	f000 f857 	bl	8005618 <prvGetNextExpireTime>
 800556a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4619      	mov	r1, r3
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f803 	bl	800557c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005576:	f000 f8d5 	bl	8005724 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800557a:	e7f1      	b.n	8005560 <prvTimerTask+0x8>

0800557c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005586:	f7ff f945 	bl	8004814 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800558a:	f107 0308 	add.w	r3, r7, #8
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f866 	bl	8005660 <prvSampleTimeNow>
 8005594:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d130      	bne.n	80055fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <prvProcessTimerOrBlockTask+0x3c>
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d806      	bhi.n	80055b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055aa:	f7ff f941 	bl	8004830 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff ff85 	bl	80054c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055b6:	e024      	b.n	8005602 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055be:	4b13      	ldr	r3, [pc, #76]	; (800560c <prvProcessTimerOrBlockTask+0x90>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <prvProcessTimerOrBlockTask+0x50>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <prvProcessTimerOrBlockTask+0x52>
 80055cc:	2300      	movs	r3, #0
 80055ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055d0:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <prvProcessTimerOrBlockTask+0x94>)
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	4619      	mov	r1, r3
 80055de:	f7fe fea9 	bl	8004334 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055e2:	f7ff f925 	bl	8004830 <xTaskResumeAll>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <prvProcessTimerOrBlockTask+0x98>)
 80055ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	f3bf 8f6f 	isb	sy
}
 80055fc:	e001      	b.n	8005602 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055fe:	f7ff f917 	bl	8004830 <xTaskResumeAll>
}
 8005602:	bf00      	nop
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000d0c 	.word	0x20000d0c
 8005610:	20000d10 	.word	0x20000d10
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005620:	4b0e      	ldr	r3, [pc, #56]	; (800565c <prvGetNextExpireTime+0x44>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <prvGetNextExpireTime+0x16>
 800562a:	2201      	movs	r2, #1
 800562c:	e000      	b.n	8005630 <prvGetNextExpireTime+0x18>
 800562e:	2200      	movs	r2, #0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d105      	bne.n	8005648 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800563c:	4b07      	ldr	r3, [pc, #28]	; (800565c <prvGetNextExpireTime+0x44>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	e001      	b.n	800564c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800564c:	68fb      	ldr	r3, [r7, #12]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000d08 	.word	0x20000d08

08005660 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005668:	f7ff f980 	bl	800496c <xTaskGetTickCount>
 800566c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800566e:	4b0b      	ldr	r3, [pc, #44]	; (800569c <prvSampleTimeNow+0x3c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	429a      	cmp	r2, r3
 8005676:	d205      	bcs.n	8005684 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005678:	f000 f936 	bl	80058e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	e002      	b.n	800568a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800568a:	4a04      	ldr	r2, [pc, #16]	; (800569c <prvSampleTimeNow+0x3c>)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005690:	68fb      	ldr	r3, [r7, #12]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000d18 	.word	0x20000d18

080056a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d812      	bhi.n	80056ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	1ad2      	subs	r2, r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d302      	bcc.n	80056da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e01b      	b.n	8005712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056da:	4b10      	ldr	r3, [pc, #64]	; (800571c <prvInsertTimerInActiveList+0x7c>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f7fd fde8 	bl	80032ba <vListInsert>
 80056ea:	e012      	b.n	8005712 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d206      	bcs.n	8005702 <prvInsertTimerInActiveList+0x62>
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	e007      	b.n	8005712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005702:	4b07      	ldr	r3, [pc, #28]	; (8005720 <prvInsertTimerInActiveList+0x80>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3304      	adds	r3, #4
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f7fd fdd4 	bl	80032ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005712:	697b      	ldr	r3, [r7, #20]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20000d0c 	.word	0x20000d0c
 8005720:	20000d08 	.word	0x20000d08

08005724 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08e      	sub	sp, #56	; 0x38
 8005728:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800572a:	e0ca      	b.n	80058c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	da18      	bge.n	8005764 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005732:	1d3b      	adds	r3, r7, #4
 8005734:	3304      	adds	r3, #4
 8005736:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10a      	bne.n	8005754 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	61fb      	str	r3, [r7, #28]
}
 8005750:	bf00      	nop
 8005752:	e7fe      	b.n	8005752 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800575a:	6850      	ldr	r0, [r2, #4]
 800575c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800575e:	6892      	ldr	r2, [r2, #8]
 8005760:	4611      	mov	r1, r2
 8005762:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f2c0 80aa 	blt.w	80058c0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d004      	beq.n	8005782 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	3304      	adds	r3, #4
 800577c:	4618      	mov	r0, r3
 800577e:	f7fd fdd5 	bl	800332c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005782:	463b      	mov	r3, r7
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff ff6b 	bl	8005660 <prvSampleTimeNow>
 800578a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b09      	cmp	r3, #9
 8005790:	f200 8097 	bhi.w	80058c2 <prvProcessReceivedCommands+0x19e>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <prvProcessReceivedCommands+0x78>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057c5 	.word	0x080057c5
 80057a0:	080057c5 	.word	0x080057c5
 80057a4:	080057c5 	.word	0x080057c5
 80057a8:	08005839 	.word	0x08005839
 80057ac:	0800584d 	.word	0x0800584d
 80057b0:	08005897 	.word	0x08005897
 80057b4:	080057c5 	.word	0x080057c5
 80057b8:	080057c5 	.word	0x080057c5
 80057bc:	08005839 	.word	0x08005839
 80057c0:	0800584d 	.word	0x0800584d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057ca:	f043 0301 	orr.w	r3, r3, #1
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	18d1      	adds	r1, r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057e4:	f7ff ff5c 	bl	80056a0 <prvInsertTimerInActiveList>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d069      	beq.n	80058c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d05e      	beq.n	80058c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	441a      	add	r2, r3
 800580c:	2300      	movs	r3, #0
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	2300      	movs	r3, #0
 8005812:	2100      	movs	r1, #0
 8005814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005816:	f7ff fe05 	bl	8005424 <xTimerGenericCommand>
 800581a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d14f      	bne.n	80058c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	61bb      	str	r3, [r7, #24]
}
 8005834:	bf00      	nop
 8005836:	e7fe      	b.n	8005836 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	b2da      	uxtb	r2, r3
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800584a:	e03a      	b.n	80058c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	b2da      	uxtb	r2, r3
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	617b      	str	r3, [r7, #20]
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	18d1      	adds	r1, r2, r3
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005890:	f7ff ff06 	bl	80056a0 <prvInsertTimerInActiveList>
					break;
 8005894:	e015      	b.n	80058c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d103      	bne.n	80058ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80058a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a6:	f000 fbdb 	bl	8006060 <vPortFree>
 80058aa:	e00a      	b.n	80058c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058b2:	f023 0301 	bic.w	r3, r3, #1
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058be:	e000      	b.n	80058c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80058c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058c2:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <prvProcessReceivedCommands+0x1c0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	1d39      	adds	r1, r7, #4
 80058c8:	2200      	movs	r2, #0
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe f926 	bl	8003b1c <xQueueReceive>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f47f af2a 	bne.w	800572c <prvProcessReceivedCommands+0x8>
	}
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	3730      	adds	r7, #48	; 0x30
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000d10 	.word	0x20000d10

080058e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058ee:	e048      	b.n	8005982 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058f0:	4b2d      	ldr	r3, [pc, #180]	; (80059a8 <prvSwitchTimerLists+0xc0>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058fa:	4b2b      	ldr	r3, [pc, #172]	; (80059a8 <prvSwitchTimerLists+0xc0>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3304      	adds	r3, #4
 8005908:	4618      	mov	r0, r3
 800590a:	f7fd fd0f 	bl	800332c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d02e      	beq.n	8005982 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	429a      	cmp	r2, r3
 8005934:	d90e      	bls.n	8005954 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005942:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <prvSwitchTimerLists+0xc0>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3304      	adds	r3, #4
 800594a:	4619      	mov	r1, r3
 800594c:	4610      	mov	r0, r2
 800594e:	f7fd fcb4 	bl	80032ba <vListInsert>
 8005952:	e016      	b.n	8005982 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005954:	2300      	movs	r3, #0
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	2300      	movs	r3, #0
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	2100      	movs	r1, #0
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7ff fd60 	bl	8005424 <xTimerGenericCommand>
 8005964:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	603b      	str	r3, [r7, #0]
}
 800597e:	bf00      	nop
 8005980:	e7fe      	b.n	8005980 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005982:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <prvSwitchTimerLists+0xc0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1b1      	bne.n	80058f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <prvSwitchTimerLists+0xc0>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005992:	4b06      	ldr	r3, [pc, #24]	; (80059ac <prvSwitchTimerLists+0xc4>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a04      	ldr	r2, [pc, #16]	; (80059a8 <prvSwitchTimerLists+0xc0>)
 8005998:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800599a:	4a04      	ldr	r2, [pc, #16]	; (80059ac <prvSwitchTimerLists+0xc4>)
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	6013      	str	r3, [r2, #0]
}
 80059a0:	bf00      	nop
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20000d08 	.word	0x20000d08
 80059ac:	20000d0c 	.word	0x20000d0c

080059b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059b6:	f000 f965 	bl	8005c84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059ba:	4b15      	ldr	r3, [pc, #84]	; (8005a10 <prvCheckForValidListAndQueue+0x60>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d120      	bne.n	8005a04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80059c2:	4814      	ldr	r0, [pc, #80]	; (8005a14 <prvCheckForValidListAndQueue+0x64>)
 80059c4:	f7fd fc28 	bl	8003218 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059c8:	4813      	ldr	r0, [pc, #76]	; (8005a18 <prvCheckForValidListAndQueue+0x68>)
 80059ca:	f7fd fc25 	bl	8003218 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059ce:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <prvCheckForValidListAndQueue+0x6c>)
 80059d0:	4a10      	ldr	r2, [pc, #64]	; (8005a14 <prvCheckForValidListAndQueue+0x64>)
 80059d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059d4:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <prvCheckForValidListAndQueue+0x70>)
 80059d6:	4a10      	ldr	r2, [pc, #64]	; (8005a18 <prvCheckForValidListAndQueue+0x68>)
 80059d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059da:	2300      	movs	r3, #0
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <prvCheckForValidListAndQueue+0x74>)
 80059e0:	4a11      	ldr	r2, [pc, #68]	; (8005a28 <prvCheckForValidListAndQueue+0x78>)
 80059e2:	2110      	movs	r1, #16
 80059e4:	200a      	movs	r0, #10
 80059e6:	f7fd fd33 	bl	8003450 <xQueueGenericCreateStatic>
 80059ea:	4603      	mov	r3, r0
 80059ec:	4a08      	ldr	r2, [pc, #32]	; (8005a10 <prvCheckForValidListAndQueue+0x60>)
 80059ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <prvCheckForValidListAndQueue+0x60>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <prvCheckForValidListAndQueue+0x60>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	490b      	ldr	r1, [pc, #44]	; (8005a2c <prvCheckForValidListAndQueue+0x7c>)
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe fc44 	bl	800428c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a04:	f000 f96e 	bl	8005ce4 <vPortExitCritical>
}
 8005a08:	bf00      	nop
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000d10 	.word	0x20000d10
 8005a14:	20000ce0 	.word	0x20000ce0
 8005a18:	20000cf4 	.word	0x20000cf4
 8005a1c:	20000d08 	.word	0x20000d08
 8005a20:	20000d0c 	.word	0x20000d0c
 8005a24:	20000dbc 	.word	0x20000dbc
 8005a28:	20000d1c 	.word	0x20000d1c
 8005a2c:	08006384 	.word	0x08006384

08005a30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3b04      	subs	r3, #4
 8005a40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3b04      	subs	r3, #4
 8005a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f023 0201 	bic.w	r2, r3, #1
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3b04      	subs	r3, #4
 8005a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a60:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <pxPortInitialiseStack+0x64>)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3b14      	subs	r3, #20
 8005a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3b04      	subs	r3, #4
 8005a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f06f 0202 	mvn.w	r2, #2
 8005a7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3b20      	subs	r3, #32
 8005a84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a86:	68fb      	ldr	r3, [r7, #12]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	08005a99 	.word	0x08005a99

08005a98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005aa2:	4b12      	ldr	r3, [pc, #72]	; (8005aec <prvTaskExitError+0x54>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aaa:	d00a      	beq.n	8005ac2 <prvTaskExitError+0x2a>
	__asm volatile
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	60fb      	str	r3, [r7, #12]
}
 8005abe:	bf00      	nop
 8005ac0:	e7fe      	b.n	8005ac0 <prvTaskExitError+0x28>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	60bb      	str	r3, [r7, #8]
}
 8005ad4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ad6:	bf00      	nop
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0fc      	beq.n	8005ad8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ade:	bf00      	nop
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	2000000c 	.word	0x2000000c

08005af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005af0:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <pxCurrentTCBConst2>)
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	f380 8809 	msr	PSP, r0
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8811 	msr	BASEPRI, r0
 8005b0a:	4770      	bx	lr
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst2>:
 8005b10:	200007e0 	.word	0x200007e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b18:	4808      	ldr	r0, [pc, #32]	; (8005b3c <prvPortStartFirstTask+0x24>)
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f380 8808 	msr	MSP, r0
 8005b22:	f04f 0000 	mov.w	r0, #0
 8005b26:	f380 8814 	msr	CONTROL, r0
 8005b2a:	b662      	cpsie	i
 8005b2c:	b661      	cpsie	f
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	df00      	svc	0
 8005b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b3a:	bf00      	nop
 8005b3c:	e000ed08 	.word	0xe000ed08

08005b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b46:	4b46      	ldr	r3, [pc, #280]	; (8005c60 <xPortStartScheduler+0x120>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a46      	ldr	r2, [pc, #280]	; (8005c64 <xPortStartScheduler+0x124>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d10a      	bne.n	8005b66 <xPortStartScheduler+0x26>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	613b      	str	r3, [r7, #16]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b66:	4b3e      	ldr	r3, [pc, #248]	; (8005c60 <xPortStartScheduler+0x120>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a3f      	ldr	r2, [pc, #252]	; (8005c68 <xPortStartScheduler+0x128>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d10a      	bne.n	8005b86 <xPortStartScheduler+0x46>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	60fb      	str	r3, [r7, #12]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b86:	4b39      	ldr	r3, [pc, #228]	; (8005c6c <xPortStartScheduler+0x12c>)
 8005b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	22ff      	movs	r2, #255	; 0xff
 8005b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	4b31      	ldr	r3, [pc, #196]	; (8005c70 <xPortStartScheduler+0x130>)
 8005bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bae:	4b31      	ldr	r3, [pc, #196]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bb4:	e009      	b.n	8005bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005bb6:	4b2f      	ldr	r3, [pc, #188]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	4a2d      	ldr	r2, [pc, #180]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd2:	2b80      	cmp	r3, #128	; 0x80
 8005bd4:	d0ef      	beq.n	8005bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bd6:	4b27      	ldr	r3, [pc, #156]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1c3 0307 	rsb	r3, r3, #7
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d00a      	beq.n	8005bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	60bb      	str	r3, [r7, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <xPortStartScheduler+0x134>)
 8005c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c02:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <xPortStartScheduler+0x134>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c0a:	4a1a      	ldr	r2, [pc, #104]	; (8005c74 <xPortStartScheduler+0x134>)
 8005c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c16:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c22:	4b15      	ldr	r3, [pc, #84]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c2e:	f000 f8dd 	bl	8005dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c32:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <xPortStartScheduler+0x13c>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c38:	f000 f8fc 	bl	8005e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <xPortStartScheduler+0x140>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a0f      	ldr	r2, [pc, #60]	; (8005c80 <xPortStartScheduler+0x140>)
 8005c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c48:	f7ff ff66 	bl	8005b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c4c:	f7fe ff58 	bl	8004b00 <vTaskSwitchContext>
	prvTaskExitError();
 8005c50:	f7ff ff22 	bl	8005a98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	e000ed00 	.word	0xe000ed00
 8005c64:	410fc271 	.word	0x410fc271
 8005c68:	410fc270 	.word	0x410fc270
 8005c6c:	e000e400 	.word	0xe000e400
 8005c70:	20000e0c 	.word	0x20000e0c
 8005c74:	20000e10 	.word	0x20000e10
 8005c78:	e000ed20 	.word	0xe000ed20
 8005c7c:	2000000c 	.word	0x2000000c
 8005c80:	e000ef34 	.word	0xe000ef34

08005c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	607b      	str	r3, [r7, #4]
}
 8005c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c9e:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <vPortEnterCritical+0x58>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	4a0d      	ldr	r2, [pc, #52]	; (8005cdc <vPortEnterCritical+0x58>)
 8005ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <vPortEnterCritical+0x58>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d10f      	bne.n	8005cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <vPortEnterCritical+0x5c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	603b      	str	r3, [r7, #0]
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <vPortEnterCritical+0x4a>
	}
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	2000000c 	.word	0x2000000c
 8005ce0:	e000ed04 	.word	0xe000ed04

08005ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cea:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <vPortExitCritical+0x50>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <vPortExitCritical+0x24>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	607b      	str	r3, [r7, #4]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <vPortExitCritical+0x50>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <vPortExitCritical+0x50>)
 8005d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d12:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <vPortExitCritical+0x50>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d105      	bne.n	8005d26 <vPortExitCritical+0x42>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	f383 8811 	msr	BASEPRI, r3
}
 8005d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	2000000c 	.word	0x2000000c
	...

08005d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d40:	f3ef 8009 	mrs	r0, PSP
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <pxCurrentTCBConst>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	f01e 0f10 	tst.w	lr, #16
 8005d50:	bf08      	it	eq
 8005d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	6010      	str	r0, [r2, #0]
 8005d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d64:	f380 8811 	msr	BASEPRI, r0
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f7fe fec6 	bl	8004b00 <vTaskSwitchContext>
 8005d74:	f04f 0000 	mov.w	r0, #0
 8005d78:	f380 8811 	msr	BASEPRI, r0
 8005d7c:	bc09      	pop	{r0, r3}
 8005d7e:	6819      	ldr	r1, [r3, #0]
 8005d80:	6808      	ldr	r0, [r1, #0]
 8005d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d86:	f01e 0f10 	tst.w	lr, #16
 8005d8a:	bf08      	it	eq
 8005d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d90:	f380 8809 	msr	PSP, r0
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	f3af 8000 	nop.w

08005da0 <pxCurrentTCBConst>:
 8005da0:	200007e0 	.word	0x200007e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop

08005da8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	607b      	str	r3, [r7, #4]
}
 8005dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dc2:	f7fe fde3 	bl	800498c <xTaskIncrementTick>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dcc:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <xPortSysTickHandler+0x40>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f383 8811 	msr	BASEPRI, r3
}
 8005dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <vPortSetupTimerInterrupt+0x34>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <vPortSetupTimerInterrupt+0x38>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <vPortSetupTimerInterrupt+0x3c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <vPortSetupTimerInterrupt+0x40>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	099b      	lsrs	r3, r3, #6
 8005e08:	4a09      	ldr	r2, [pc, #36]	; (8005e30 <vPortSetupTimerInterrupt+0x44>)
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e0e:	4b04      	ldr	r3, [pc, #16]	; (8005e20 <vPortSetupTimerInterrupt+0x34>)
 8005e10:	2207      	movs	r2, #7
 8005e12:	601a      	str	r2, [r3, #0]
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000e010 	.word	0xe000e010
 8005e24:	e000e018 	.word	0xe000e018
 8005e28:	20000000 	.word	0x20000000
 8005e2c:	10624dd3 	.word	0x10624dd3
 8005e30:	e000e014 	.word	0xe000e014

08005e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e44 <vPortEnableVFP+0x10>
 8005e38:	6801      	ldr	r1, [r0, #0]
 8005e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e3e:	6001      	str	r1, [r0, #0]
 8005e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e42:	bf00      	nop
 8005e44:	e000ed88 	.word	0xe000ed88

08005e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e4e:	f3ef 8305 	mrs	r3, IPSR
 8005e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b0f      	cmp	r3, #15
 8005e58:	d914      	bls.n	8005e84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e5a:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <vPortValidateInterruptPriority+0x70>)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e64:	4b15      	ldr	r3, [pc, #84]	; (8005ebc <vPortValidateInterruptPriority+0x74>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	7afa      	ldrb	r2, [r7, #11]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d20a      	bcs.n	8005e84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	607b      	str	r3, [r7, #4]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e84:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <vPortValidateInterruptPriority+0x78>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <vPortValidateInterruptPriority+0x7c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d90a      	bls.n	8005eaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	603b      	str	r3, [r7, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <vPortValidateInterruptPriority+0x60>
	}
 8005eaa:	bf00      	nop
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	e000e3f0 	.word	0xe000e3f0
 8005ebc:	20000e0c 	.word	0x20000e0c
 8005ec0:	e000ed0c 	.word	0xe000ed0c
 8005ec4:	20000e10 	.word	0x20000e10

08005ec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	; 0x28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ed4:	f7fe fc9e 	bl	8004814 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ed8:	4b5b      	ldr	r3, [pc, #364]	; (8006048 <pvPortMalloc+0x180>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ee0:	f000 f920 	bl	8006124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ee4:	4b59      	ldr	r3, [pc, #356]	; (800604c <pvPortMalloc+0x184>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f040 8093 	bne.w	8006018 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01d      	beq.n	8005f34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ef8:	2208      	movs	r2, #8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4413      	add	r3, r2
 8005efe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d014      	beq.n	8005f34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f023 0307 	bic.w	r3, r3, #7
 8005f10:	3308      	adds	r3, #8
 8005f12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <pvPortMalloc+0x6c>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	617b      	str	r3, [r7, #20]
}
 8005f30:	bf00      	nop
 8005f32:	e7fe      	b.n	8005f32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d06e      	beq.n	8006018 <pvPortMalloc+0x150>
 8005f3a:	4b45      	ldr	r3, [pc, #276]	; (8006050 <pvPortMalloc+0x188>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d869      	bhi.n	8006018 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f44:	4b43      	ldr	r3, [pc, #268]	; (8006054 <pvPortMalloc+0x18c>)
 8005f46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f48:	4b42      	ldr	r3, [pc, #264]	; (8006054 <pvPortMalloc+0x18c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f4e:	e004      	b.n	8005f5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d903      	bls.n	8005f6c <pvPortMalloc+0xa4>
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1f1      	bne.n	8005f50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f6c:	4b36      	ldr	r3, [pc, #216]	; (8006048 <pvPortMalloc+0x180>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d050      	beq.n	8006018 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2208      	movs	r2, #8
 8005f7c:	4413      	add	r3, r2
 8005f7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	2308      	movs	r3, #8
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d91f      	bls.n	8005fd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <pvPortMalloc+0xf8>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	613b      	str	r3, [r7, #16]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fd2:	69b8      	ldr	r0, [r7, #24]
 8005fd4:	f000 f908 	bl	80061e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <pvPortMalloc+0x188>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	4a1b      	ldr	r2, [pc, #108]	; (8006050 <pvPortMalloc+0x188>)
 8005fe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fe6:	4b1a      	ldr	r3, [pc, #104]	; (8006050 <pvPortMalloc+0x188>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <pvPortMalloc+0x190>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d203      	bcs.n	8005ffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ff2:	4b17      	ldr	r3, [pc, #92]	; (8006050 <pvPortMalloc+0x188>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a18      	ldr	r2, [pc, #96]	; (8006058 <pvPortMalloc+0x190>)
 8005ff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <pvPortMalloc+0x184>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	431a      	orrs	r2, r3
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800600e:	4b13      	ldr	r3, [pc, #76]	; (800605c <pvPortMalloc+0x194>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3301      	adds	r3, #1
 8006014:	4a11      	ldr	r2, [pc, #68]	; (800605c <pvPortMalloc+0x194>)
 8006016:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006018:	f7fe fc0a 	bl	8004830 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <pvPortMalloc+0x174>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	60fb      	str	r3, [r7, #12]
}
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <pvPortMalloc+0x172>
	return pvReturn;
 800603c:	69fb      	ldr	r3, [r7, #28]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3728      	adds	r7, #40	; 0x28
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20004a1c 	.word	0x20004a1c
 800604c:	20004a30 	.word	0x20004a30
 8006050:	20004a20 	.word	0x20004a20
 8006054:	20004a14 	.word	0x20004a14
 8006058:	20004a24 	.word	0x20004a24
 800605c:	20004a28 	.word	0x20004a28

08006060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d04d      	beq.n	800610e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006072:	2308      	movs	r3, #8
 8006074:	425b      	negs	r3, r3
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	4b24      	ldr	r3, [pc, #144]	; (8006118 <vPortFree+0xb8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <vPortFree+0x44>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60fb      	str	r3, [r7, #12]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <vPortFree+0x62>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	60bb      	str	r3, [r7, #8]
}
 80060be:	bf00      	nop
 80060c0:	e7fe      	b.n	80060c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	4b14      	ldr	r3, [pc, #80]	; (8006118 <vPortFree+0xb8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01e      	beq.n	800610e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d11a      	bne.n	800610e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <vPortFree+0xb8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	43db      	mvns	r3, r3
 80060e2:	401a      	ands	r2, r3
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060e8:	f7fe fb94 	bl	8004814 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <vPortFree+0xbc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4413      	add	r3, r2
 80060f6:	4a09      	ldr	r2, [pc, #36]	; (800611c <vPortFree+0xbc>)
 80060f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060fa:	6938      	ldr	r0, [r7, #16]
 80060fc:	f000 f874 	bl	80061e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006100:	4b07      	ldr	r3, [pc, #28]	; (8006120 <vPortFree+0xc0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3301      	adds	r3, #1
 8006106:	4a06      	ldr	r2, [pc, #24]	; (8006120 <vPortFree+0xc0>)
 8006108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800610a:	f7fe fb91 	bl	8004830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800610e:	bf00      	nop
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20004a30 	.word	0x20004a30
 800611c:	20004a20 	.word	0x20004a20
 8006120:	20004a2c 	.word	0x20004a2c

08006124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800612a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800612e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006130:	4b27      	ldr	r3, [pc, #156]	; (80061d0 <prvHeapInit+0xac>)
 8006132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00c      	beq.n	8006158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3307      	adds	r3, #7
 8006142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0307 	bic.w	r3, r3, #7
 800614a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	4a1f      	ldr	r2, [pc, #124]	; (80061d0 <prvHeapInit+0xac>)
 8006154:	4413      	add	r3, r2
 8006156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800615c:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <prvHeapInit+0xb0>)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006162:	4b1c      	ldr	r3, [pc, #112]	; (80061d4 <prvHeapInit+0xb0>)
 8006164:	2200      	movs	r2, #0
 8006166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	4413      	add	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006170:	2208      	movs	r2, #8
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0307 	bic.w	r3, r3, #7
 800617e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4a15      	ldr	r2, [pc, #84]	; (80061d8 <prvHeapInit+0xb4>)
 8006184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006186:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <prvHeapInit+0xb4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2200      	movs	r2, #0
 800618c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800618e:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <prvHeapInit+0xb4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	1ad2      	subs	r2, r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <prvHeapInit+0xb4>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4a0a      	ldr	r2, [pc, #40]	; (80061dc <prvHeapInit+0xb8>)
 80061b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	4a09      	ldr	r2, [pc, #36]	; (80061e0 <prvHeapInit+0xbc>)
 80061ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <prvHeapInit+0xc0>)
 80061be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061c2:	601a      	str	r2, [r3, #0]
}
 80061c4:	bf00      	nop
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	20000e14 	.word	0x20000e14
 80061d4:	20004a14 	.word	0x20004a14
 80061d8:	20004a1c 	.word	0x20004a1c
 80061dc:	20004a24 	.word	0x20004a24
 80061e0:	20004a20 	.word	0x20004a20
 80061e4:	20004a30 	.word	0x20004a30

080061e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061f0:	4b28      	ldr	r3, [pc, #160]	; (8006294 <prvInsertBlockIntoFreeList+0xac>)
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	e002      	b.n	80061fc <prvInsertBlockIntoFreeList+0x14>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	429a      	cmp	r2, r3
 8006204:	d8f7      	bhi.n	80061f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	4413      	add	r3, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	429a      	cmp	r2, r3
 8006216:	d108      	bne.n	800622a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	441a      	add	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	441a      	add	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d118      	bne.n	8006270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4b15      	ldr	r3, [pc, #84]	; (8006298 <prvInsertBlockIntoFreeList+0xb0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d00d      	beq.n	8006266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	441a      	add	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	e008      	b.n	8006278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006266:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <prvInsertBlockIntoFreeList+0xb0>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e003      	b.n	8006278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	429a      	cmp	r2, r3
 800627e:	d002      	beq.n	8006286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006286:	bf00      	nop
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20004a14 	.word	0x20004a14
 8006298:	20004a1c 	.word	0x20004a1c

0800629c <__libc_init_array>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	4d0d      	ldr	r5, [pc, #52]	; (80062d4 <__libc_init_array+0x38>)
 80062a0:	4c0d      	ldr	r4, [pc, #52]	; (80062d8 <__libc_init_array+0x3c>)
 80062a2:	1b64      	subs	r4, r4, r5
 80062a4:	10a4      	asrs	r4, r4, #2
 80062a6:	2600      	movs	r6, #0
 80062a8:	42a6      	cmp	r6, r4
 80062aa:	d109      	bne.n	80062c0 <__libc_init_array+0x24>
 80062ac:	4d0b      	ldr	r5, [pc, #44]	; (80062dc <__libc_init_array+0x40>)
 80062ae:	4c0c      	ldr	r4, [pc, #48]	; (80062e0 <__libc_init_array+0x44>)
 80062b0:	f000 f82e 	bl	8006310 <_init>
 80062b4:	1b64      	subs	r4, r4, r5
 80062b6:	10a4      	asrs	r4, r4, #2
 80062b8:	2600      	movs	r6, #0
 80062ba:	42a6      	cmp	r6, r4
 80062bc:	d105      	bne.n	80062ca <__libc_init_array+0x2e>
 80062be:	bd70      	pop	{r4, r5, r6, pc}
 80062c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c4:	4798      	blx	r3
 80062c6:	3601      	adds	r6, #1
 80062c8:	e7ee      	b.n	80062a8 <__libc_init_array+0xc>
 80062ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ce:	4798      	blx	r3
 80062d0:	3601      	adds	r6, #1
 80062d2:	e7f2      	b.n	80062ba <__libc_init_array+0x1e>
 80062d4:	08006530 	.word	0x08006530
 80062d8:	08006530 	.word	0x08006530
 80062dc:	08006530 	.word	0x08006530
 80062e0:	08006534 	.word	0x08006534

080062e4 <memcpy>:
 80062e4:	440a      	add	r2, r1
 80062e6:	4291      	cmp	r1, r2
 80062e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062ec:	d100      	bne.n	80062f0 <memcpy+0xc>
 80062ee:	4770      	bx	lr
 80062f0:	b510      	push	{r4, lr}
 80062f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062fa:	4291      	cmp	r1, r2
 80062fc:	d1f9      	bne.n	80062f2 <memcpy+0xe>
 80062fe:	bd10      	pop	{r4, pc}

08006300 <memset>:
 8006300:	4402      	add	r2, r0
 8006302:	4603      	mov	r3, r0
 8006304:	4293      	cmp	r3, r2
 8006306:	d100      	bne.n	800630a <memset+0xa>
 8006308:	4770      	bx	lr
 800630a:	f803 1b01 	strb.w	r1, [r3], #1
 800630e:	e7f9      	b.n	8006304 <memset+0x4>

08006310 <_init>:
 8006310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006312:	bf00      	nop
 8006314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006316:	bc08      	pop	{r3}
 8006318:	469e      	mov	lr, r3
 800631a:	4770      	bx	lr

0800631c <_fini>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	bf00      	nop
 8006320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006322:	bc08      	pop	{r3}
 8006324:	469e      	mov	lr, r3
 8006326:	4770      	bx	lr
